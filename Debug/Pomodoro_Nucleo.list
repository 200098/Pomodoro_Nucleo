
Pomodoro_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005410  08005410  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005410  08005410  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000074  0800548c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800548c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016af6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003104  00000000  00000000  00036b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00039c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af6  00000000  00000000  0003bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160d0  00000000  00000000  000558be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e704  00000000  00000000  0006b98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  000fa0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fd0 	.word	0x08004fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004fd0 	.word	0x08004fd0

0800014c <ButtonInit>:

/*
 * Initialization of button
 */
void ButtonInit(TButton* Button, GPIO_TypeDef* GpioPort, uint16_t GpioPin)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
	Button->State= IDLE_BUTTON;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	2200      	movs	r2, #0
 800015e:	701a      	strb	r2, [r3, #0]
	Button->GpioPort = GpioPort;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	605a      	str	r2, [r3, #4]
	Button->GpioPin = GpioPin;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	88fa      	ldrh	r2, [r7, #6]
 800016a:	811a      	strh	r2, [r3, #8]
	Button->TimerDebounce = DEBOUNCE_TIME;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2232      	movs	r2, #50	; 0x32
 8000170:	611a      	str	r2, [r3, #16]

	Flag_PressedDebounced = false;
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <ButtonInit+0x38>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]
}
 8000178:	bf00      	nop
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	200004a8 	.word	0x200004a8

08000188 <ButtonTask>:

/*
 * Button State Machine
 */
void ButtonTask(TButton* Button)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	switch(Button->State)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d042      	beq.n	800021e <ButtonTask+0x96>
 8000198:	2b02      	cmp	r3, #2
 800019a:	dc54      	bgt.n	8000246 <ButtonTask+0xbe>
 800019c:	2b00      	cmp	r3, #0
 800019e:	d002      	beq.n	80001a6 <ButtonTask+0x1e>
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d017      	beq.n	80001d4 <ButtonTask+0x4c>
			{
				Button->State= IDLE_BUTTON;
			}
			break;
	}
}
 80001a4:	e04f      	b.n	8000246 <ButtonTask+0xbe>
			if(BUTTON_PRESSED == HAL_GPIO_ReadPin(Button->GpioPort, Button->GpioPin))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	685a      	ldr	r2, [r3, #4]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	891b      	ldrh	r3, [r3, #8]
 80001ae:	4619      	mov	r1, r3
 80001b0:	4610      	mov	r0, r2
 80001b2:	f002 faad 	bl	8002710 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d13f      	bne.n	800023c <ButtonTask+0xb4>
				Button->LastTick = HAL_GetTick();
 80001bc:	f002 f80c 	bl	80021d8 <HAL_GetTick>
 80001c0:	4602      	mov	r2, r0
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	60da      	str	r2, [r3, #12]
				Button->State= DEBOUNCE_BUTTON;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2201      	movs	r2, #1
 80001ca:	701a      	strb	r2, [r3, #0]
				Flag_PressedDebounced = false;
 80001cc:	4b20      	ldr	r3, [pc, #128]	; (8000250 <ButtonTask+0xc8>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
			break;
 80001d2:	e033      	b.n	800023c <ButtonTask+0xb4>
			if (HAL_GetTick() - Button->LastTick >= Button->TimerDebounce)
 80001d4:	f002 f800 	bl	80021d8 <HAL_GetTick>
 80001d8:	4602      	mov	r2, r0
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	1ad2      	subs	r2, r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d32b      	bcc.n	8000240 <ButtonTask+0xb8>
				Button->LastTick = HAL_GetTick();
 80001e8:	f001 fff6 	bl	80021d8 <HAL_GetTick>
 80001ec:	4602      	mov	r2, r0
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	60da      	str	r2, [r3, #12]
				if(BUTTON_PRESSED == HAL_GPIO_ReadPin(Button->GpioPort, Button->GpioPin))
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	685a      	ldr	r2, [r3, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	891b      	ldrh	r3, [r3, #8]
 80001fa:	4619      	mov	r1, r3
 80001fc:	4610      	mov	r0, r2
 80001fe:	f002 fa87 	bl	8002710 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d106      	bne.n	8000216 <ButtonTask+0x8e>
					Button->State= PRESSED_BUTTON;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2202      	movs	r2, #2
 800020c:	701a      	strb	r2, [r3, #0]
					Flag_PressedDebounced = true;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <ButtonTask+0xc8>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
			break;
 8000214:	e014      	b.n	8000240 <ButtonTask+0xb8>
				Button->State= IDLE_BUTTON;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
			break;
 800021c:	e010      	b.n	8000240 <ButtonTask+0xb8>
			if(BUTTON_RELEASED == HAL_GPIO_ReadPin(Button->GpioPort, Button->GpioPin))
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	891b      	ldrh	r3, [r3, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	4610      	mov	r0, r2
 800022a:	f002 fa71 	bl	8002710 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	2b01      	cmp	r3, #1
 8000232:	d107      	bne.n	8000244 <ButtonTask+0xbc>
				Button->State= IDLE_BUTTON;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
			break;
 800023a:	e003      	b.n	8000244 <ButtonTask+0xbc>
			break;
 800023c:	bf00      	nop
 800023e:	e002      	b.n	8000246 <ButtonTask+0xbe>
			break;
 8000240:	bf00      	nop
 8000242:	e000      	b.n	8000246 <ButtonTask+0xbe>
			break;
 8000244:	bf00      	nop
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200004a8 	.word	0x200004a8

08000254 <ButtonIsPressed>:
/*
 * Read actual state of button
 */

_Bool ButtonIsPressed(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	if (Flag_PressedDebounced)
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <ButtonIsPressed+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d004      	beq.n	800026a <ButtonIsPressed+0x16>
	{
		Flag_PressedDebounced = false;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <ButtonIsPressed+0x20>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]

		return true;
 8000266:	2301      	movs	r3, #1
 8000268:	e000      	b.n	800026c <ButtonIsPressed+0x18>
	}
	return false;
 800026a:	2300      	movs	r3, #0
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	200004a8 	.word	0x200004a8

08000278 <BuzzerInit>:

/*
 * Initialization of buzzer
 */
void BuzzerInit(TBuzzer* Buzzer, GPIO_TypeDef* GpioPort, uint16_t GpioPin)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	4613      	mov	r3, r2
 8000284:	80fb      	strh	r3, [r7, #6]
	Buzzer->GpioPort = GpioPort;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	68ba      	ldr	r2, [r7, #8]
 800028a:	601a      	str	r2, [r3, #0]
	Buzzer->GpioPin = GpioPin;
 800028c:	88fa      	ldrh	r2, [r7, #6]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_RESET);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	6818      	ldr	r0, [r3, #0]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	b29b      	uxth	r3, r3
 800029c:	2200      	movs	r2, #0
 800029e:	4619      	mov	r1, r3
 80002a0:	f002 fa4d 	bl	800273e <HAL_GPIO_WritePin>
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <BuzzerPlay>:
/*
 * Play signal by buzzer
 */

void BuzzerPlay(TBuzzer* Buzzer,TPlayPressed PlaySignal)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
	switch(PlaySignal)
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	d856      	bhi.n	800036c <BuzzerPlay+0xc0>
 80002be:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <BuzzerPlay+0x18>)
 80002c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c4:	080002d5 	.word	0x080002d5
 80002c8:	080002f9 	.word	0x080002f9
 80002cc:	0800031f 	.word	0x0800031f
 80002d0:	08000345 	.word	0x08000345
	{
		case PRESSED:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	2201      	movs	r2, #1
 80002e0:	4619      	mov	r1, r3
 80002e2:	f002 fa2c 	bl	800273e <HAL_GPIO_WritePin>
			Buzzer->LastTick = HAL_GetTick();
 80002e6:	f001 ff77 	bl	80021d8 <HAL_GetTick>
 80002ea:	4602      	mov	r2, r0
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	609a      	str	r2, [r3, #8]
			Buzzer->SignalTime = PRESSED_TIME;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2232      	movs	r2, #50	; 0x32
 80002f4:	60da      	str	r2, [r3, #12]
			break;
 80002f6:	e039      	b.n	800036c <BuzzerPlay+0xc0>
		case CHANGE_STEP:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	b29b      	uxth	r3, r3
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f002 fa1a 	bl	800273e <HAL_GPIO_WritePin>
			Buzzer->LastTick = HAL_GetTick();
 800030a:	f001 ff65 	bl	80021d8 <HAL_GetTick>
 800030e:	4602      	mov	r2, r0
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	609a      	str	r2, [r3, #8]
			Buzzer->SignalTime = CHANGE_STEP_TIME;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800031a:	60da      	str	r2, [r3, #12]
			break;
 800031c:	e026      	b.n	800036c <BuzzerPlay+0xc0>
		case FINISH:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6818      	ldr	r0, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	b29b      	uxth	r3, r3
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	f002 fa07 	bl	800273e <HAL_GPIO_WritePin>
			Buzzer->LastTick = HAL_GetTick();
 8000330:	f001 ff52 	bl	80021d8 <HAL_GetTick>
 8000334:	4602      	mov	r2, r0
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	609a      	str	r2, [r3, #8]
			Buzzer->SignalTime = FINISH_TIME;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000340:	60da      	str	r2, [r3, #12]
			break;
 8000342:	e013      	b.n	800036c <BuzzerPlay+0xc0>
		case STOP:
			if (HAL_GetTick() - Buzzer->LastTick >= Buzzer->SignalTime)
 8000344:	f001 ff48 	bl	80021d8 <HAL_GetTick>
 8000348:	4602      	mov	r2, r0
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	1ad2      	subs	r2, r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	d308      	bcc.n	800036a <BuzzerPlay+0xbe>
				HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_RESET);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	b29b      	uxth	r3, r3
 8000362:	2200      	movs	r2, #0
 8000364:	4619      	mov	r1, r3
 8000366:	f002 f9ea 	bl	800273e <HAL_GPIO_WritePin>
			break;
 800036a:	bf00      	nop
	}
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <EncoderInit>:

/*
 * Initialization of encoder
 */
void EncoderInit(TEncoder* Encoder)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	Encoder->State= IDLE_ENCODER;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]

	Encoder->TimerDebounce = DEBOUNCE_TIME;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2232      	movs	r2, #50	; 0x32
 8000386:	609a      	str	r2, [r3, #8]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
	...

08000394 <EncoderTask>:

/*
 * State machine of encoder
 */
void EncoderTask(TEncoder* Encoder)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	switch(Encoder->State)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d857      	bhi.n	8000454 <EncoderTask+0xc0>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <EncoderTask+0x18>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	080003db 	.word	0x080003db
 80003b4:	080003ed 	.word	0x080003ed
 80003b8:	08000411 	.word	0x08000411
 80003bc:	08000443 	.word	0x08000443
	{
		case IDLE_ENCODER:
			if(EncoderIsWorking())
 80003c0:	f000 f8a0 	bl	8000504 <EncoderIsWorking>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d043      	beq.n	8000452 <EncoderTask+0xbe>
			{
				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80003ca:	213c      	movs	r1, #60	; 0x3c
 80003cc:	4823      	ldr	r0, [pc, #140]	; (800045c <EncoderTask+0xc8>)
 80003ce:	f003 fc1d 	bl	8003c0c <HAL_TIM_Encoder_Start>
				Encoder->State= START_HANDLE_ENCODER;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80003d8:	e03b      	b.n	8000452 <EncoderTask+0xbe>
		case START_HANDLE_ENCODER:

			Encoder->LastTick = HAL_GetTick();
 80003da:	f001 fefd 	bl	80021d8 <HAL_GetTick>
 80003de:	4602      	mov	r2, r0
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	605a      	str	r2, [r3, #4]
			Encoder->State= DEBOUNCE_ENCODER;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2202      	movs	r2, #2
 80003e8:	701a      	strb	r2, [r3, #0]

			break;
 80003ea:	e033      	b.n	8000454 <EncoderTask+0xc0>
		case DEBOUNCE_ENCODER:
			if (HAL_GetTick() - Encoder->LastTick >= Encoder->TimerDebounce)
 80003ec:	f001 fef4 	bl	80021d8 <HAL_GetTick>
 80003f0:	4602      	mov	r2, r0
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	1ad2      	subs	r2, r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d303      	bcc.n	8000408 <EncoderTask+0x74>
			{
				 Encoder->State= HANDLE_ENCODER;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2203      	movs	r2, #3
 8000404:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Encoder->State= DEBOUNCE_ENCODER;
			}
			break;
 8000406:	e025      	b.n	8000454 <EncoderTask+0xc0>
				Encoder->State= DEBOUNCE_ENCODER;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2202      	movs	r2, #2
 800040c:	701a      	strb	r2, [r3, #0]
			break;
 800040e:	e021      	b.n	8000454 <EncoderTask+0xc0>
		case HANDLE_ENCODER:

			EncoderSetPosition(htim1.Instance->CNT);
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <EncoderTask+0xc8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f846 	bl	80004a8 <EncoderSetPosition>
			EncoderChange = true;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <EncoderTask+0xcc>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]

			if(!EncoderIsWorking())
 8000422:	f000 f86f 	bl	8000504 <EncoderIsWorking>
 8000426:	4603      	mov	r3, r0
 8000428:	f083 0301 	eor.w	r3, r3, #1
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <EncoderTask+0xa6>
			{
				Encoder->State= STOP_HANDLE_ENCODER;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2204      	movs	r2, #4
 8000436:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Encoder->State= START_HANDLE_ENCODER;
			}
			break;
 8000438:	e00c      	b.n	8000454 <EncoderTask+0xc0>
				Encoder->State= START_HANDLE_ENCODER;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
			break;
 8000440:	e008      	b.n	8000454 <EncoderTask+0xc0>
		case STOP_HANDLE_ENCODER:

			HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000442:	213c      	movs	r1, #60	; 0x3c
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <EncoderTask+0xc8>)
 8000446:	f003 fc6f 	bl	8003d28 <HAL_TIM_Encoder_Stop>
			Encoder->State= IDLE_ENCODER;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]

			break;
 8000450:	e000      	b.n	8000454 <EncoderTask+0xc0>
			break;
 8000452:	bf00      	nop
	}
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200004ac 	.word	0x200004ac
 8000460:	20000094 	.word	0x20000094

08000464 <EncoderSetValue>:

/*
 * Set new value when Pomodoro SM goes to new state
 */
void EncoderSetValue(int Value)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, Value);
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <EncoderSetValue+0x1c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	200004ac 	.word	0x200004ac

08000484 <EncoderHasChange>:
/*
 * Update when Encoder has changed
 */

_Bool EncoderHasChange(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	if(EncoderChange)
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <EncoderHasChange+0x20>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <EncoderHasChange+0x16>
	{
		EncoderChange = false;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <EncoderHasChange+0x20>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		return true;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <EncoderHasChange+0x18>
	}
	else
		return false;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000094 	.word	0x20000094

080004a8 <EncoderSetPosition>:

void EncoderSetPosition(int32_t Value)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	EncoderState = Value;
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <EncoderSetPosition+0x18>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000090 	.word	0x20000090

080004c4 <EncoderReadPosition>:

int32_t EncoderReadPosition(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	return EncoderState;
 80004c8:	4b02      	ldr	r3, [pc, #8]	; (80004d4 <EncoderReadPosition+0x10>)
 80004ca:	681b      	ldr	r3, [r3, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000090 	.word	0x20000090

080004d8 <EncoderSetWorking>:
/*
 * Setter and Getter for Encoder Working
 */

void EncoderSetWorking(_Bool WorkingFlag)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if(WorkingFlag)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d003      	beq.n	80004f0 <EncoderSetWorking+0x18>
		EncoderWorking = true;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EncoderSetWorking+0x28>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	else
		EncoderWorking = false;
}
 80004ee:	e002      	b.n	80004f6 <EncoderSetWorking+0x1e>
		EncoderWorking = false;
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EncoderSetWorking+0x28>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000095 	.word	0x20000095

08000504 <EncoderIsWorking>:

_Bool EncoderIsWorking(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	if(EncoderWorking)
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EncoderIsWorking+0x1c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <EncoderIsWorking+0x10>
	{
		return true;
 8000510:	2301      	movs	r3, #1
 8000512:	e000      	b.n	8000516 <EncoderIsWorking+0x12>
	}
	return false;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000095 	.word	0x20000095

08000524 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <GFX_SetFont+0x18>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	200004f4 	.word	0x200004f4

08000540 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <GFX_SetFontSize+0x16>
		size = size_t;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <GFX_SetFontSize+0x20>)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	7013      	strb	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	20000000 	.word	0x20000000

08000564 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af02      	add	r7, sp, #8
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	4611      	mov	r1, r2
 8000570:	461a      	mov	r2, r3
 8000572:	460b      	mov	r3, r1
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	4613      	mov	r3, r2
 8000578:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b7e      	cmp	r3, #126	; 0x7e
 800057e:	f200 80a3 	bhi.w	80006c8 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000582:	2300      	movs	r3, #0
 8000584:	75fb      	strb	r3, [r7, #23]
 8000586:	e096      	b.n	80006b6 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <GFX_DrawChar+0x16c>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	3b20      	subs	r3, #32
 8000590:	494f      	ldr	r1, [pc, #316]	; (80006d0 <GFX_DrawChar+0x16c>)
 8000592:	6809      	ldr	r1, [r1, #0]
 8000594:	3101      	adds	r1, #1
 8000596:	7809      	ldrb	r1, [r1, #0]
 8000598:	fb01 f103 	mul.w	r1, r1, r3
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	440b      	add	r3, r1
 80005a0:	3302      	adds	r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80005a8:	2300      	movs	r3, #0
 80005aa:	757b      	strb	r3, [r7, #21]
 80005ac:	e078      	b.n	80006a0 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80005ae:	7dbb      	ldrb	r3, [r7, #22]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d032      	beq.n	800061e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80005b8:	4b46      	ldr	r3, [pc, #280]	; (80006d4 <GFX_DrawChar+0x170>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d113      	bne.n	80005e8 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4413      	add	r3, r2
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	b218      	sxth	r0, r3
 80005ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b21b      	sxth	r3, r3
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f001 f819 	bl	8001618 <SSD1306_DrawPixel>
 80005e6:	e052      	b.n	800068e <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <GFX_DrawChar+0x170>)
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	fb02 f203 	mul.w	r2, r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	18d0      	adds	r0, r2, r3
 80005f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80005fa:	4a36      	ldr	r2, [pc, #216]	; (80006d4 <GFX_DrawChar+0x170>)
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	fb02 f203 	mul.w	r2, r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	18d1      	adds	r1, r2, r3
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <GFX_DrawChar+0x170>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <GFX_DrawChar+0x170>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b29c      	uxth	r4, r3
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4623      	mov	r3, r4
 8000618:	f000 f9a3 	bl	8000962 <GFX_DrawFillRectangle>
 800061c:	e037      	b.n	800068e <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800061e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000622:	2b00      	cmp	r3, #0
 8000624:	d133      	bne.n	800068e <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <GFX_DrawChar+0x170>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d114      	bne.n	8000658 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	b29a      	uxth	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	b29b      	uxth	r3, r3
 8000636:	4413      	add	r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	b218      	sxth	r0, r3
 800063c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000640:	b29a      	uxth	r2, r3
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4413      	add	r3, r2
 8000648:	b29b      	uxth	r3, r3
 800064a:	b21b      	sxth	r3, r3
 800064c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000650:	4619      	mov	r1, r3
 8000652:	f000 ffe1 	bl	8001618 <SSD1306_DrawPixel>
 8000656:	e01a      	b.n	800068e <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <GFX_DrawChar+0x170>)
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	fb02 f203 	mul.w	r2, r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	18d0      	adds	r0, r2, r3
 8000666:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <GFX_DrawChar+0x170>)
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	fb02 f203 	mul.w	r2, r2, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	18d1      	adds	r1, r2, r3
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <GFX_DrawChar+0x170>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <GFX_DrawChar+0x170>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29c      	uxth	r4, r3
 8000682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4623      	mov	r3, r4
 800068a:	f000 f96a 	bl	8000962 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800068e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	757b      	strb	r3, [r7, #21]
 800069a:	7dbb      	ldrb	r3, [r7, #22]
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	75bb      	strb	r3, [r7, #22]
 80006a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <GFX_DrawChar+0x16c>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	4293      	cmp	r3, r2
 80006ac:	f6ff af7f 	blt.w	80005ae <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	3301      	adds	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <GFX_DrawChar+0x16c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	7dfa      	ldrb	r2, [r7, #23]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	f4ff af61 	bcc.w	8000588 <GFX_DrawChar+0x24>
 80006c6:	e000      	b.n	80006ca <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80006c8:	bf00      	nop
            }
        }
    }
}
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	200004f4 	.word	0x200004f4
 80006d4:	20000000 	.word	0x20000000

080006d8 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af02      	add	r7, sp, #8
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80006f0:	e03e      	b.n	8000770 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80006f2:	78f9      	ldrb	r1, [r7, #3]
 80006f4:	7cfa      	ldrb	r2, [r7, #19]
 80006f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	460b      	mov	r3, r1
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	6978      	ldr	r0, [r7, #20]
 8000702:	f7ff ff2f 	bl	8000564 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <GFX_DrawString+0xb0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <GFX_DrawString+0xb4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	fb03 f302 	mul.w	r3, r3, r2
 8000718:	3301      	adds	r3, #1
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8000720:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d120      	bne.n	800076a <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000728:	2300      	movs	r3, #0
 800072a:	74bb      	strb	r3, [r7, #18]
 800072c:	e012      	b.n	8000754 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	b29b      	uxth	r3, r3
 8000736:	b218      	sxth	r0, r3
 8000738:	7cbb      	ldrb	r3, [r7, #18]
 800073a:	b29a      	uxth	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	b29b      	uxth	r3, r3
 8000740:	4413      	add	r3, r2
 8000742:	b29b      	uxth	r3, r3
 8000744:	b21b      	sxth	r3, r3
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	f000 ff65 	bl	8001618 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	3301      	adds	r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
 8000754:	7cba      	ldrb	r2, [r7, #18]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <GFX_DrawString+0xb0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <GFX_DrawString+0xb4>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	fb03 f301 	mul.w	r3, r3, r1
 8000766:	429a      	cmp	r2, r3
 8000768:	dbe1      	blt.n	800072e <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1ba      	bne.n	80006f2 <GFX_DrawString+0x1a>
	}
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200004f4 	.word	0x200004f4
 800078c:	20000000 	.word	0x20000000

08000790 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	1acb      	subs	r3, r1, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bfb8      	it	lt
 80007b6:	425b      	neglt	r3, r3
 80007b8:	429a      	cmp	r2, r3
 80007ba:	bfcc      	ite	gt
 80007bc:	2301      	movgt	r3, #1
 80007be:	2300      	movle	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80007c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00b      	beq.n	80007e4 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dd0b      	ble.n	8000804 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	b29a      	uxth	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	b29b      	uxth	r3, r3
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	b29b      	uxth	r3, r3
 8000810:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	bfb8      	it	lt
 800081c:	425b      	neglt	r3, r3
 800081e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000820:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000824:	0fda      	lsrs	r2, r3, #31
 8000826:	4413      	add	r3, r2
 8000828:	105b      	asrs	r3, r3, #1
 800082a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	da02      	bge.n	800083a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000838:	e030      	b.n	800089c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000840:	e02c      	b.n	800089c <GFX_WriteLine+0x10c>
	        if (steep) {
 8000842:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000846:	2b00      	cmp	r3, #0
 8000848:	d009      	beq.n	800085e <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	b21b      	sxth	r3, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	b211      	sxth	r1, r2
 8000852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fede 	bl	8001618 <SSD1306_DrawPixel>
 800085c:	e008      	b.n	8000870 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	b21b      	sxth	r3, r3
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	b211      	sxth	r1, r2
 8000866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fed4 	bl	8001618 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000870:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000872:	8abb      	ldrh	r3, [r7, #20]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800087a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800087e:	2b00      	cmp	r3, #0
 8000880:	da09      	bge.n	8000896 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000882:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	4413      	add	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800088c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800088e:	8afb      	ldrh	r3, [r7, #22]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	ddce      	ble.n	8000842 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af02      	add	r7, sp, #8
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	1e5a      	subs	r2, r3, #1
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff ff5e 	bl	8000790 <GFX_WriteLine>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff48 	bl	8000790 <GFX_WriteLine>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	460b      	mov	r3, r1
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	4613      	mov	r3, r2
 800091c:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	7e3b      	ldrb	r3, [r7, #24]
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff ffd9 	bl	80008dc <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 800092a:	88ba      	ldrh	r2, [r7, #4]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	1e59      	subs	r1, r3, #1
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	7e3b      	ldrb	r3, [r7, #24]
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff ffd0 	bl	80008dc <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	7e3b      	ldrb	r3, [r7, #24]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff ffb3 	bl	80008ae <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4413      	add	r3, r2
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	88ba      	ldrh	r2, [r7, #4]
 8000952:	7e3b      	ldrb	r3, [r7, #24]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	f7ff ffaa 	bl	80008ae <GFX_DrawFastVLine>

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	4611      	mov	r1, r2
 800096e:	461a      	mov	r2, r3
 8000970:	460b      	mov	r3, r1
 8000972:	80fb      	strh	r3, [r7, #6]
 8000974:	4613      	mov	r3, r2
 8000976:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e009      	b.n	8000992 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 800097e:	88ba      	ldrh	r2, [r7, #4]
 8000980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff91 	bl	80008ae <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	88fa      	ldrh	r2, [r7, #6]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	429a      	cmp	r2, r3
 800099c:	dbef      	blt.n	800097e <GFX_DrawFillRectangle+0x1c>
    }

}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <PomodoroDisplay_SetUpdate>:

/*
 * Functions to set update of display
 */
void PomodoroDisplay_SetUpdate(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

		Flag_DisplayUpdate = true;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <PomodoroDisplay_SetUpdate+0x14>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000096 	.word	0x20000096

080009c0 <PomodoroDisplay_SetToggleUpdate>:

void PomodoroDisplay_SetToggleUpdate(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
		Flag_DisplayToggleUpdate = true;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <PomodoroDisplay_SetToggleUpdate+0x14>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000097 	.word	0x20000097

080009d8 <PomodoroDisplayUpdate>:

/*
 * Functions to handle update of display
 */
_Bool PomodoroDisplayUpdate(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	if (Flag_DisplayUpdate)
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <PomodoroDisplayUpdate+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <PomodoroDisplayUpdate+0x16>
	{
		Flag_DisplayUpdate = false;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <PomodoroDisplayUpdate+0x20>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		return true;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <PomodoroDisplayUpdate+0x18>
	}
	return false;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000096 	.word	0x20000096

080009fc <PomodoroDisplayToggleUpdate>:

_Bool PomodoroDisplayToggleUpdate(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	if (Flag_DisplayToggleUpdate)
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <PomodoroDisplayToggleUpdate+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <PomodoroDisplayToggleUpdate+0x16>
	{
		Flag_DisplayToggleUpdate = false;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <PomodoroDisplayToggleUpdate+0x20>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
		return true;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <PomodoroDisplayToggleUpdate+0x18>
	}
	return false;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000097 	.word	0x20000097

08000a20 <PomodoroDisplayToggleButtonInit>:
 * Functions for carry of Toggle button
 */

void PomodoroDisplayToggleButtonInit(TPomodoroDisplayToogleText *ToggledText, const uint8_t xPosition, const uint8_t yPosition,
		const uint8_t xSize, const uint8_t ySize, const uint8_t xText, const uint8_t yText,char* text)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	70fb      	strb	r3, [r7, #3]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70bb      	strb	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	707b      	strb	r3, [r7, #1]

	ToggledText->xPosition = xPosition;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	78fa      	ldrb	r2, [r7, #3]
 8000a3e:	701a      	strb	r2, [r3, #0]
	ToggledText->yPosition = yPosition;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	78ba      	ldrb	r2, [r7, #2]
 8000a44:	705a      	strb	r2, [r3, #1]

	ToggledText->xSize = xSize;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	787a      	ldrb	r2, [r7, #1]
 8000a4a:	709a      	strb	r2, [r3, #2]
	ToggledText->ySize = ySize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7c3a      	ldrb	r2, [r7, #16]
 8000a50:	70da      	strb	r2, [r3, #3]

	ToggledText->xText = xText;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7d3a      	ldrb	r2, [r7, #20]
 8000a56:	711a      	strb	r2, [r3, #4]
	ToggledText->yText = yText;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7e3a      	ldrb	r2, [r7, #24]
 8000a5c:	715a      	strb	r2, [r3, #5]
	ToggledText->text = text;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	609a      	str	r2, [r3, #8]

}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <PomodoroDisplaySwitchOffToggle>:

void PomodoroDisplaySwitchOffToggle(TPomodoroDisplayToogleText *ToggledText)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af02      	add	r7, sp, #8
 8000a74:	6078      	str	r0, [r7, #4]
	GFX_DrawFillRectangle(0, ToggledText->yPosition, ToggledText->xSize, ToggledText->ySize, BLACK);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2100      	movs	r1, #0
 8000a8a:	9100      	str	r1, [sp, #0]
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff ff67 	bl	8000962 <GFX_DrawFillRectangle>
	GFX_DrawString(ToggledText->xText , ToggledText->yText, ToggledText->text , WHITE, BLACK);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	791b      	ldrb	r3, [r3, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f7ff fe15 	bl	80006d8 <GFX_DrawString>
	SSD1306_Display();
 8000aae:	f000 fe5f 	bl	8001770 <SSD1306_Display>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <PomodoroDisplayToggle>:

void PomodoroDisplayToggle(TPomodoroDisplayToogleText *ToggledText)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	static TMode actualMode = DARK;

	switch(actualMode)
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <PomodoroDisplayToggle+0xa0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d021      	beq.n	8000b10 <PomodoroDisplayToggle+0x54>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d13f      	bne.n	8000b50 <PomodoroDisplayToggle+0x94>
		{
			case DARK:
				actualMode = BRIGHT;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <PomodoroDisplayToggle+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
				GFX_DrawFillRectangle(0, ToggledText->yPosition, ToggledText->xSize, ToggledText->ySize, BLACK);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	4618      	mov	r0, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	789b      	ldrb	r3, [r3, #2]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	78db      	ldrb	r3, [r3, #3]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	9100      	str	r1, [sp, #0]
 8000aec:	4601      	mov	r1, r0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ff37 	bl	8000962 <GFX_DrawFillRectangle>
				GFX_DrawString(ToggledText->xText , ToggledText->yText, ToggledText->text , WHITE, BLACK);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	4619      	mov	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	2300      	movs	r3, #0
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f7ff fde5 	bl	80006d8 <GFX_DrawString>

			break;
 8000b0e:	e01f      	b.n	8000b50 <PomodoroDisplayToggle+0x94>
			case BRIGHT:
				actualMode = DARK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <PomodoroDisplayToggle+0xa0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
				GFX_DrawFillRectangle(0, ToggledText->yPosition, ToggledText->xSize, ToggledText->ySize, WHITE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	78db      	ldrb	r3, [r3, #3]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	2101      	movs	r1, #1
 8000b2a:	9100      	str	r1, [sp, #0]
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff17 	bl	8000962 <GFX_DrawFillRectangle>
				GFX_DrawString(ToggledText->xText , ToggledText->yText, ToggledText->text ,BLACK, WHITE);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	795b      	ldrb	r3, [r3, #5]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f7ff fdc5 	bl	80006d8 <GFX_DrawString>
			break;
 8000b4e:	bf00      	nop
		}
		SSD1306_Display();
 8000b50:	f000 fe0e 	bl	8001770 <SSD1306_Display>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000001 	.word	0x20000001

08000b60 <PomodoroDisplayChooseConfiguration>:
/*
 * Functions to present Screen in each stare
 */

void PomodoroDisplayChooseConfiguration(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af02      	add	r7, sp, #8
	PomodoroDisplayClearDisplay();
 8000b66:	f000 f953 	bl	8000e10 <PomodoroDisplayClearDisplay>
	GFX_DrawString(10, 10, "Choose your setup" , WHITE, BLACK);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <PomodoroDisplayChooseConfiguration+0x24>)
 8000b72:	210a      	movs	r1, #10
 8000b74:	200a      	movs	r0, #10
 8000b76:	f7ff fdaf 	bl	80006d8 <GFX_DrawString>
	SSD1306_Display();
 8000b7a:	f000 fdf9 	bl	8001770 <SSD1306_Display>
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08004fe8 	.word	0x08004fe8

08000b88 <PomodoroDisplayOwnSetting>:

void PomodoroDisplayOwnSetting(const int8_t presentValue, char* question, char* unit)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(10, 10, question , WHITE, BLACK);
 8000b96:	2300      	movs	r3, #0
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	210a      	movs	r1, #10
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f7ff fd99 	bl	80006d8 <GFX_DrawString>
	sprintf(str, unit, presentValue);
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	461a      	mov	r2, r3
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <PomodoroDisplayOwnSetting+0x58>)
 8000bb0:	f003 fdd4 	bl	800475c <siprintf>
	GFX_DrawString(40, 25, str , WHITE, BLACK);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <PomodoroDisplayOwnSetting+0x58>)
 8000bbc:	2119      	movs	r1, #25
 8000bbe:	2028      	movs	r0, #40	; 0x28
 8000bc0:	f7ff fd8a 	bl	80006d8 <GFX_DrawString>
	GFX_DrawString(10, 40, "Use knob to change" , WHITE, BLACK);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <PomodoroDisplayOwnSetting+0x5c>)
 8000bcc:	2128      	movs	r1, #40	; 0x28
 8000bce:	200a      	movs	r0, #10
 8000bd0:	f7ff fd82 	bl	80006d8 <GFX_DrawString>

	SSD1306_Display();
 8000bd4:	f000 fdcc 	bl	8001770 <SSD1306_Display>
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200004f8 	.word	0x200004f8
 8000be4:	08004ffc 	.word	0x08004ffc

08000be8 <PomodoroDisplayPresentSetup>:

void PomodoroDisplayPresentSetup(TPomodoro* Pomodoro)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	6078      	str	r0, [r7, #4]
	PomodoroDisplayClearDisplay();
 8000bf0:	f000 f90e 	bl	8000e10 <PomodoroDisplayClearDisplay>
	sprintf(str, "Cycles of pomodoro: %d", (int)Pomodoro->RepeatCycle);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7a5b      	ldrb	r3, [r3, #9]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4927      	ldr	r1, [pc, #156]	; (8000c98 <PomodoroDisplayPresentSetup+0xb0>)
 8000bfc:	4827      	ldr	r0, [pc, #156]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000bfe:	f003 fdad 	bl	800475c <siprintf>
	GFX_DrawString(00, 00, str , WHITE, BLACK);
 8000c02:	2300      	movs	r3, #0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd63 	bl	80006d8 <GFX_DrawString>

	sprintf(str, "Work:%dmin", (int)Pomodoro->WorkTime);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4921      	ldr	r1, [pc, #132]	; (8000ca0 <PomodoroDisplayPresentSetup+0xb8>)
 8000c1a:	4820      	ldr	r0, [pc, #128]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c1c:	f003 fd9e 	bl	800475c <siprintf>
	GFX_DrawString(00, 10, str , WHITE, BLACK);
 8000c20:	2300      	movs	r3, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c28:	210a      	movs	r1, #10
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fd54 	bl	80006d8 <GFX_DrawString>

	sprintf(str, "Rest:%dmin", (int)Pomodoro->ShortRestTime);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	461a      	mov	r2, r3
 8000c36:	491b      	ldr	r1, [pc, #108]	; (8000ca4 <PomodoroDisplayPresentSetup+0xbc>)
 8000c38:	4818      	ldr	r0, [pc, #96]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c3a:	f003 fd8f 	bl	800475c <siprintf>
	GFX_DrawString(67, 10, str , WHITE, BLACK);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c46:	210a      	movs	r1, #10
 8000c48:	2043      	movs	r0, #67	; 0x43
 8000c4a:	f7ff fd45 	bl	80006d8 <GFX_DrawString>

	sprintf(str, "Break:%dmin", (int)Pomodoro->LongRestTime);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	795b      	ldrb	r3, [r3, #5]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4914      	ldr	r1, [pc, #80]	; (8000ca8 <PomodoroDisplayPresentSetup+0xc0>)
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c58:	f003 fd80 	bl	800475c <siprintf>
	GFX_DrawString(00, 20, str , WHITE, BLACK);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c64:	2114      	movs	r1, #20
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fd36 	bl	80006d8 <GFX_DrawString>

	sprintf(str, "in every %d cycle", (int)Pomodoro->LongRestCycle);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	79db      	ldrb	r3, [r3, #7]
 8000c70:	461a      	mov	r2, r3
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <PomodoroDisplayPresentSetup+0xc4>)
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c76:	f003 fd71 	bl	800475c <siprintf>
	GFX_DrawString(00, 30, str , WHITE, BLACK);
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <PomodoroDisplayPresentSetup+0xb4>)
 8000c82:	211e      	movs	r1, #30
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fd27 	bl	80006d8 <GFX_DrawString>

	SSD1306_Display();
 8000c8a:	f000 fd71 	bl	8001770 <SSD1306_Display>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08005010 	.word	0x08005010
 8000c9c:	200004f8 	.word	0x200004f8
 8000ca0:	08005028 	.word	0x08005028
 8000ca4:	08005034 	.word	0x08005034
 8000ca8:	08005040 	.word	0x08005040
 8000cac:	0800504c 	.word	0x0800504c

08000cb0 <PomodoroDisplayStateOfWork>:

void PomodoroDisplayStateOfWork(TStateOfWork StateToDisplay, TPomodoro* Pomodoro)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]

	PomodoroDisplayClearDisplay();
 8000cbc:	f000 f8a8 	bl	8000e10 <PomodoroDisplayClearDisplay>
	uint8_t minute;
	uint8_t seconds;
	uint8_t restTime;

	minute = Pomodoro->ActualTimer/60;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	895b      	ldrh	r3, [r3, #10]
 8000cc4:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <PomodoroDisplayStateOfWork+0xf0>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	73bb      	strb	r3, [r7, #14]
	seconds = Pomodoro->ActualTimer%60;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	895a      	ldrh	r2, [r3, #10]
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <PomodoroDisplayStateOfWork+0xf0>)
 8000cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000cda:	0959      	lsrs	r1, r3, #5
 8000cdc:	460b      	mov	r3, r1
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	737b      	strb	r3, [r7, #13]

	GFX_DrawString(10, 00, "You are in cycle" , WHITE, BLACK);
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <PomodoroDisplayStateOfWork+0xf4>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f7ff fcef 	bl	80006d8 <GFX_DrawString>
	sprintf(str, " %d of %d cycles", (int)Pomodoro->Cycle, (int)Pomodoro->RepeatCycle);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	7a1b      	ldrb	r3, [r3, #8]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	7a5b      	ldrb	r3, [r3, #9]
 8000d04:	4928      	ldr	r1, [pc, #160]	; (8000da8 <PomodoroDisplayStateOfWork+0xf8>)
 8000d06:	4829      	ldr	r0, [pc, #164]	; (8000dac <PomodoroDisplayStateOfWork+0xfc>)
 8000d08:	f003 fd28 	bl	800475c <siprintf>
	GFX_DrawString(10, 10, str , WHITE, BLACK);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	4a26      	ldr	r2, [pc, #152]	; (8000dac <PomodoroDisplayStateOfWork+0xfc>)
 8000d14:	210a      	movs	r1, #10
 8000d16:	200a      	movs	r0, #10
 8000d18:	f7ff fcde 	bl	80006d8 <GFX_DrawString>

	GFX_DrawRectangle(0, 22, 124, 26, WHITE);
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	231a      	movs	r3, #26
 8000d22:	227c      	movs	r2, #124	; 0x7c
 8000d24:	2116      	movs	r1, #22
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fdee 	bl	8000908 <GFX_DrawRectangle>
	if(WORK == StateToDisplay)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10b      	bne.n	8000d4a <PomodoroDisplayStateOfWork+0x9a>
	{
		GFX_DrawString(20, 25, "Time to work" , WHITE, BLACK);
 8000d32:	2300      	movs	r3, #0
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <PomodoroDisplayStateOfWork+0x100>)
 8000d3a:	2119      	movs	r1, #25
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f7ff fccb 	bl	80006d8 <GFX_DrawString>
		restTime = Pomodoro->WorkTime;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e00a      	b.n	8000d60 <PomodoroDisplayStateOfWork+0xb0>
	}

	else
	{
		GFX_DrawString(20, 25, "Time for rest" , WHITE, BLACK);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <PomodoroDisplayStateOfWork+0x104>)
 8000d52:	2119      	movs	r1, #25
 8000d54:	2014      	movs	r0, #20
 8000d56:	f7ff fcbf 	bl	80006d8 <GFX_DrawString>
		restTime = Pomodoro->RestTime;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	78db      	ldrb	r3, [r3, #3]
 8000d5e:	73fb      	strb	r3, [r7, #15]
	}

	sprintf(str, "%1d:%02d min in %2d min", minute,seconds,restTime);
 8000d60:	7bba      	ldrb	r2, [r7, #14]
 8000d62:	7b79      	ldrb	r1, [r7, #13]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4913      	ldr	r1, [pc, #76]	; (8000db8 <PomodoroDisplayStateOfWork+0x108>)
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <PomodoroDisplayStateOfWork+0xfc>)
 8000d6e:	f003 fcf5 	bl	800475c <siprintf>
	GFX_DrawString(10, 35, str , WHITE, BLACK);
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <PomodoroDisplayStateOfWork+0xfc>)
 8000d7a:	2123      	movs	r1, #35	; 0x23
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f7ff fcab 	bl	80006d8 <GFX_DrawString>

	GFX_DrawString(20, 50, "PRESS TO PAUSE" , WHITE, BLACK);
 8000d82:	2300      	movs	r3, #0
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <PomodoroDisplayStateOfWork+0x10c>)
 8000d8a:	2132      	movs	r1, #50	; 0x32
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f7ff fca3 	bl	80006d8 <GFX_DrawString>
	SSD1306_Display();
 8000d92:	f000 fced 	bl	8001770 <SSD1306_Display>

}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	88888889 	.word	0x88888889
 8000da4:	08005060 	.word	0x08005060
 8000da8:	08005074 	.word	0x08005074
 8000dac:	200004f8 	.word	0x200004f8
 8000db0:	08005088 	.word	0x08005088
 8000db4:	08005098 	.word	0x08005098
 8000db8:	080050a8 	.word	0x080050a8
 8000dbc:	080050c0 	.word	0x080050c0

08000dc0 <PomodoroDisplayPause>:

void PomodoroDisplayPause(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	PomodoroDisplayClearDisplay();
 8000dc6:	f000 f823 	bl	8000e10 <PomodoroDisplayClearDisplay>
	GFX_DrawString(50 , 11, "Pause" , WHITE, BLACK);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <PomodoroDisplayPause+0x24>)
 8000dd2:	210b      	movs	r1, #11
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f7ff fc7f 	bl	80006d8 <GFX_DrawString>
	SSD1306_Display();
 8000dda:	f000 fcc9 	bl	8001770 <SSD1306_Display>
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080050d0 	.word	0x080050d0

08000de8 <PomodoroDisplayFinish>:


void PomodoroDisplayFinish(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af02      	add	r7, sp, #8
	PomodoroDisplayClearDisplay();
 8000dee:	f000 f80f 	bl	8000e10 <PomodoroDisplayClearDisplay>
	GFX_DrawString(10, 10, "Completed all cycles" , WHITE, BLACK);
 8000df2:	2300      	movs	r3, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <PomodoroDisplayFinish+0x24>)
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f7ff fc6b 	bl	80006d8 <GFX_DrawString>
	SSD1306_Display();
 8000e02:	f000 fcb5 	bl	8001770 <SSD1306_Display>
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	080050d8 	.word	0x080050d8

08000e10 <PomodoroDisplayClearDisplay>:

void PomodoroDisplayClearDisplay(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	SSD1306_Clear(BLACK);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 fc8d 	bl	8001734 <SSD1306_Clear>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <PomodoroInit>:

/*
 * Initialization of Pomodoro
 */
void PomodoroInit(TPomodoro* Pomodoro)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	6078      	str	r0, [r7, #4]
	Pomodoro->State			= IDLE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	Pomodoro->PreviousState	= IDLE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	705a      	strb	r2, [r3, #1]

	Pomodoro->WorkTime 		= 15;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	220f      	movs	r2, #15
 8000e38:	709a      	strb	r2, [r3, #2]

	Pomodoro->RestTime 		= 0;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	70da      	strb	r2, [r3, #3]
	Pomodoro->ShortRestTime = 5;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2205      	movs	r2, #5
 8000e44:	711a      	strb	r2, [r3, #4]
	Pomodoro->LongRestTime 	= 10;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	220a      	movs	r2, #10
 8000e4a:	715a      	strb	r2, [r3, #5]

	Pomodoro->LongRestCycle = 4;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	71da      	strb	r2, [r3, #7]
	Pomodoro->Cycle    		= 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	721a      	strb	r2, [r3, #8]

	Pomodoro->RepeatCycle	= 8;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	725a      	strb	r2, [r3, #9]
	Pomodoro->ActualTimer  	= 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	815a      	strh	r2, [r3, #10]
	Pomodoro->TimerBeforePause = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	819a      	strh	r2, [r3, #12]


	PomodoroDisplayToggleButtonInit(&BasicSetup,0, 20, 128, 20, 25, 25,  "Basic setup");
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <PomodoroInit+0x13c>)
 8000e6c:	9303      	str	r3, [sp, #12]
 8000e6e:	2319      	movs	r3, #25
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2319      	movs	r3, #25
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	2314      	movs	r3, #20
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	2214      	movs	r2, #20
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4837      	ldr	r0, [pc, #220]	; (8000f60 <PomodoroInit+0x140>)
 8000e82:	f7ff fdcd 	bl	8000a20 <PomodoroDisplayToggleButtonInit>
	PomodoroDisplayToggleButtonInit(&OwnSetup,0, 40, 128, 20, 25, 45,  "Own setup");
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <PomodoroInit+0x144>)
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	232d      	movs	r3, #45	; 0x2d
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	2319      	movs	r3, #25
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	2314      	movs	r3, #20
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	2228      	movs	r2, #40	; 0x28
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <PomodoroInit+0x148>)
 8000e9e:	f7ff fdbf 	bl	8000a20 <PomodoroDisplayToggleButtonInit>

	PomodoroDisplayToggleButtonInit(&EditSetup, 0, 40, 128,10,50,41,  "Edit");
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <PomodoroInit+0x14c>)
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	2329      	movs	r3, #41	; 0x29
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	2332      	movs	r3, #50	; 0x32
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	230a      	movs	r3, #10
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	2228      	movs	r2, #40	; 0x28
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	482d      	ldr	r0, [pc, #180]	; (8000f70 <PomodoroInit+0x150>)
 8000eba:	f7ff fdb1 	bl	8000a20 <PomodoroDisplayToggleButtonInit>
	PomodoroDisplayToggleButtonInit(&StartWork, 0, 50, 128,10,50,51,  "Start");
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <PomodoroInit+0x154>)
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2333      	movs	r3, #51	; 0x33
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2332      	movs	r3, #50	; 0x32
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	230a      	movs	r3, #10
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	2232      	movs	r2, #50	; 0x32
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4828      	ldr	r0, [pc, #160]	; (8000f78 <PomodoroInit+0x158>)
 8000ed6:	f7ff fda3 	bl	8000a20 <PomodoroDisplayToggleButtonInit>

	PomodoroDisplayToggleButtonInit(&PressToConfirm,0, 50, 128, 20, 30, 55,  "Press to set");
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <PomodoroInit+0x15c>)
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	2337      	movs	r3, #55	; 0x37
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	231e      	movs	r3, #30
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	2232      	movs	r2, #50	; 0x32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <PomodoroInit+0x160>)
 8000ef2:	f7ff fd95 	bl	8000a20 <PomodoroDisplayToggleButtonInit>

	PomodoroDisplayToggleButtonInit(&BackToPomodoroText, 0, 20, 128, 20, 25, 25,   "Return to cycle");
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <PomodoroInit+0x164>)
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	2319      	movs	r3, #25
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2319      	movs	r3, #25
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2314      	movs	r3, #20
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	2214      	movs	r2, #20
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <PomodoroInit+0x168>)
 8000f0e:	f7ff fd87 	bl	8000a20 <PomodoroDisplayToggleButtonInit>
	PomodoroDisplayToggleButtonInit(&ExitFromCycleText,0, 40, 128, 20, 25, 45,   "Exit cycle");
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <PomodoroInit+0x16c>)
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	232d      	movs	r3, #45	; 0x2d
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2319      	movs	r3, #25
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	2314      	movs	r3, #20
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	2228      	movs	r2, #40	; 0x28
 8000f26:	2100      	movs	r1, #0
 8000f28:	4819      	ldr	r0, [pc, #100]	; (8000f90 <PomodoroInit+0x170>)
 8000f2a:	f7ff fd79 	bl	8000a20 <PomodoroDisplayToggleButtonInit>

	PomodoroDisplayToggleButtonInit(&BackToMenu,0, 40, 128, 20, 25, 45,  "Back to menu");
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <PomodoroInit+0x174>)
 8000f30:	9303      	str	r3, [sp, #12]
 8000f32:	232d      	movs	r3, #45	; 0x2d
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2319      	movs	r3, #25
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	2228      	movs	r2, #40	; 0x28
 8000f42:	2100      	movs	r1, #0
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <PomodoroInit+0x178>)
 8000f46:	f7ff fd6b 	bl	8000a20 <PomodoroDisplayToggleButtonInit>

	BuzzerInit(&Buzzer, BUZZER_GPIO_Port, BUZZER_Pin);
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	4913      	ldr	r1, [pc, #76]	; (8000f9c <PomodoroInit+0x17c>)
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <PomodoroInit+0x180>)
 8000f50:	f7ff f992 	bl	8000278 <BuzzerInit>


}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	080050f0 	.word	0x080050f0
 8000f60:	20000524 	.word	0x20000524
 8000f64:	080050fc 	.word	0x080050fc
 8000f68:	2000054c 	.word	0x2000054c
 8000f6c:	08005108 	.word	0x08005108
 8000f70:	20000558 	.word	0x20000558
 8000f74:	08005110 	.word	0x08005110
 8000f78:	20000540 	.word	0x20000540
 8000f7c:	08005118 	.word	0x08005118
 8000f80:	2000057c 	.word	0x2000057c
 8000f84:	08005128 	.word	0x08005128
 8000f88:	20000518 	.word	0x20000518
 8000f8c:	08005138 	.word	0x08005138
 8000f90:	20000564 	.word	0x20000564
 8000f94:	08005144 	.word	0x08005144
 8000f98:	20000570 	.word	0x20000570
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	20000530 	.word	0x20000530

08000fa4 <PomodoroTask>:
/*
 * Pomodoro State Machine
 */

void PomodoroTask(TPomodoro* Pomodoro)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	BuzzerPlay(&Buzzer,STOP);
 8000fac:	2103      	movs	r1, #3
 8000fae:	48c4      	ldr	r0, [pc, #784]	; (80012c0 <PomodoroTask+0x31c>)
 8000fb0:	f7ff f97c 	bl	80002ac <BuzzerPlay>
	switch(Pomodoro->State)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	f200 82e7 	bhi.w	800158c <PomodoroTask+0x5e8>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <PomodoroTask+0x20>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08001005 	.word	0x08001005
 8000fc8:	08001017 	.word	0x08001017
 8000fcc:	08001091 	.word	0x08001091
 8000fd0:	080010f9 	.word	0x080010f9
 8000fd4:	08001161 	.word	0x08001161
 8000fd8:	080011c9 	.word	0x080011c9
 8000fdc:	08001231 	.word	0x08001231
 8000fe0:	0800129b 	.word	0x0800129b
 8000fe4:	0800133b 	.word	0x0800133b
 8000fe8:	08001361 	.word	0x08001361
 8000fec:	08001403 	.word	0x08001403
 8000ff0:	08001473 	.word	0x08001473
 8000ff4:	08001493 	.word	0x08001493
 8000ff8:	08001505 	.word	0x08001505
 8000ffc:	0800151f 	.word	0x0800151f
 8001000:	08001549 	.word	0x08001549
	{
		case IDLE:
			Pomodoro->State = WAITING_FOR_CHOOSE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
			EncoderSetWorking(true);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fa64 	bl	80004d8 <EncoderSetWorking>
			PomodoroDisplayChooseConfiguration();
 8001010:	f7ff fda6 	bl	8000b60 <PomodoroDisplayChooseConfiguration>
			break;
 8001014:	e2ba      	b.n	800158c <PomodoroTask+0x5e8>
		case WAITING_FOR_CHOOSE:
			if(PomodoroDisplayToggleUpdate())
 8001016:	f7ff fcf1 	bl	80009fc <PomodoroDisplayToggleUpdate>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <PomodoroTask+0xa4>
			{
				if(DEVIDED_BY_2(EncoderReadPosition()))
 8001020:	f7ff fa50 	bl	80004c4 <EncoderReadPosition>
 8001024:	4603      	mov	r3, r0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <PomodoroTask+0x98>
				{
					PomodoroDisplayToggle(&BasicSetup);
 800102e:	48a5      	ldr	r0, [pc, #660]	; (80012c4 <PomodoroTask+0x320>)
 8001030:	f7ff fd44 	bl	8000abc <PomodoroDisplayToggle>
					PomodoroDisplaySwitchOffToggle(&OwnSetup);
 8001034:	48a4      	ldr	r0, [pc, #656]	; (80012c8 <PomodoroTask+0x324>)
 8001036:	f7ff fd1a 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
 800103a:	e005      	b.n	8001048 <PomodoroTask+0xa4>
				}
				else
				{
					PomodoroDisplaySwitchOffToggle(&BasicSetup);
 800103c:	48a1      	ldr	r0, [pc, #644]	; (80012c4 <PomodoroTask+0x320>)
 800103e:	f7ff fd16 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
					PomodoroDisplayToggle(&OwnSetup);
 8001042:	48a1      	ldr	r0, [pc, #644]	; (80012c8 <PomodoroTask+0x324>)
 8001044:	f7ff fd3a 	bl	8000abc <PomodoroDisplayToggle>
				}
			}
			if(ButtonIsPressed())
 8001048:	f7ff f904 	bl	8000254 <ButtonIsPressed>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8287 	beq.w	8001562 <PomodoroTask+0x5be>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 8001054:	2100      	movs	r1, #0
 8001056:	489a      	ldr	r0, [pc, #616]	; (80012c0 <PomodoroTask+0x31c>)
 8001058:	f7ff f928 	bl	80002ac <BuzzerPlay>

				if(DEVIDED_BY_2(EncoderReadPosition()))
 800105c:	f7ff fa32 	bl	80004c4 <EncoderReadPosition>
 8001060:	4603      	mov	r3, r0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d109      	bne.n	800107e <PomodoroTask+0xda>
				{
					EncoderSetValue(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff f9fa 	bl	8000464 <EncoderSetValue>
					Pomodoro->State = PRESENT_SETUP;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2207      	movs	r2, #7
 8001074:	701a      	strb	r2, [r3, #0]
					PomodoroDisplayPresentSetup(Pomodoro);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fdb6 	bl	8000be8 <PomodoroDisplayPresentSetup>
					EncoderSetValue(4);
					Pomodoro->State = SET_OWN_CYCLES;
					PomodoroDisplayClearDisplay();
				}
			}
			break;
 800107c:	e271      	b.n	8001562 <PomodoroTask+0x5be>
					EncoderSetValue(4);
 800107e:	2004      	movs	r0, #4
 8001080:	f7ff f9f0 	bl	8000464 <EncoderSetValue>
					Pomodoro->State = SET_OWN_CYCLES;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	701a      	strb	r2, [r3, #0]
					PomodoroDisplayClearDisplay();
 800108a:	f7ff fec1 	bl	8000e10 <PomodoroDisplayClearDisplay>
			break;
 800108e:	e268      	b.n	8001562 <PomodoroTask+0x5be>
		case SET_OWN_CYCLES:
			if(EncoderHasChange())
 8001090:	f7ff f9f8 	bl	8000484 <EncoderHasChange>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00d      	beq.n	80010b6 <PomodoroTask+0x112>
			{

				presentValue = (int)EncoderReadPosition();
 800109a:	f7ff fa13 	bl	80004c4 <EncoderReadPosition>
 800109e:	4603      	mov	r3, r0
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <PomodoroTask+0x328>)
 80010a4:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayOwnSetting(presentValue, "How much cycles?" , "%2d cycles");
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <PomodoroTask+0x328>)
 80010a8:	f993 3000 	ldrsb.w	r3, [r3]
 80010ac:	4a88      	ldr	r2, [pc, #544]	; (80012d0 <PomodoroTask+0x32c>)
 80010ae:	4989      	ldr	r1, [pc, #548]	; (80012d4 <PomodoroTask+0x330>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fd69 	bl	8000b88 <PomodoroDisplayOwnSetting>
			}
			if(ButtonIsPressed())
 80010b6:	f7ff f8cd 	bl	8000254 <ButtonIsPressed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d011      	beq.n	80010e4 <PomodoroTask+0x140>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 80010c0:	2100      	movs	r1, #0
 80010c2:	487f      	ldr	r0, [pc, #508]	; (80012c0 <PomodoroTask+0x31c>)
 80010c4:	f7ff f8f2 	bl	80002ac <BuzzerPlay>
				EncoderSetValue(10);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f7ff f9cb 	bl	8000464 <EncoderSetValue>
				Pomodoro->RepeatCycle = presentValue;
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <PomodoroTask+0x328>)
 80010d0:	f993 3000 	ldrsb.w	r3, [r3]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	725a      	strb	r2, [r3, #9]
				Pomodoro->State = SET_WORK_TIME;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayClearDisplay();
 80010e0:	f7ff fe96 	bl	8000e10 <PomodoroDisplayClearDisplay>
			}
			if(PomodoroDisplayToggleUpdate())
 80010e4:	f7ff fc8a 	bl	80009fc <PomodoroDisplayToggleUpdate>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 823b 	beq.w	8001566 <PomodoroTask+0x5c2>
			{
				PomodoroDisplayToggle(&PressToConfirm);
 80010f0:	4879      	ldr	r0, [pc, #484]	; (80012d8 <PomodoroTask+0x334>)
 80010f2:	f7ff fce3 	bl	8000abc <PomodoroDisplayToggle>
			}
			break;
 80010f6:	e236      	b.n	8001566 <PomodoroTask+0x5c2>
		case SET_WORK_TIME:
			if(EncoderHasChange())
 80010f8:	f7ff f9c4 	bl	8000484 <EncoderHasChange>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <PomodoroTask+0x17a>
			{
				presentValue = (int)EncoderReadPosition();
 8001102:	f7ff f9df 	bl	80004c4 <EncoderReadPosition>
 8001106:	4603      	mov	r3, r0
 8001108:	b25a      	sxtb	r2, r3
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <PomodoroTask+0x328>)
 800110c:	701a      	strb	r2, [r3, #0]

				PomodoroDisplayOwnSetting(presentValue, "Work time?" , "%2d min");
 800110e:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <PomodoroTask+0x328>)
 8001110:	f993 3000 	ldrsb.w	r3, [r3]
 8001114:	4a71      	ldr	r2, [pc, #452]	; (80012dc <PomodoroTask+0x338>)
 8001116:	4972      	ldr	r1, [pc, #456]	; (80012e0 <PomodoroTask+0x33c>)
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd35 	bl	8000b88 <PomodoroDisplayOwnSetting>
			}
			if(PomodoroDisplayToggleUpdate())
 800111e:	f7ff fc6d 	bl	80009fc <PomodoroDisplayToggleUpdate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <PomodoroTask+0x18a>
			{
				PomodoroDisplayToggle(&PressToConfirm);
 8001128:	486b      	ldr	r0, [pc, #428]	; (80012d8 <PomodoroTask+0x334>)
 800112a:	f7ff fcc7 	bl	8000abc <PomodoroDisplayToggle>
			}
			if(ButtonIsPressed())
 800112e:	f7ff f891 	bl	8000254 <ButtonIsPressed>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8218 	beq.w	800156a <PomodoroTask+0x5c6>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 800113a:	2100      	movs	r1, #0
 800113c:	4860      	ldr	r0, [pc, #384]	; (80012c0 <PomodoroTask+0x31c>)
 800113e:	f7ff f8b5 	bl	80002ac <BuzzerPlay>
				EncoderSetValue(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f7ff f98e 	bl	8000464 <EncoderSetValue>
				Pomodoro->WorkTime = presentValue;
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <PomodoroTask+0x328>)
 800114a:	f993 3000 	ldrsb.w	r3, [r3]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	709a      	strb	r2, [r3, #2]
				Pomodoro->State = SET_REST_TIME;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayClearDisplay();
 800115a:	f7ff fe59 	bl	8000e10 <PomodoroDisplayClearDisplay>
			}
			break;
 800115e:	e204      	b.n	800156a <PomodoroTask+0x5c6>
		case SET_REST_TIME:
			if(EncoderHasChange())
 8001160:	f7ff f990 	bl	8000484 <EncoderHasChange>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00d      	beq.n	8001186 <PomodoroTask+0x1e2>
			{
				presentValue = (int)EncoderReadPosition();
 800116a:	f7ff f9ab 	bl	80004c4 <EncoderReadPosition>
 800116e:	4603      	mov	r3, r0
 8001170:	b25a      	sxtb	r2, r3
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <PomodoroTask+0x328>)
 8001174:	701a      	strb	r2, [r3, #0]

				PomodoroDisplayOwnSetting(presentValue, "Short rest time?", "%2d min");
 8001176:	4b55      	ldr	r3, [pc, #340]	; (80012cc <PomodoroTask+0x328>)
 8001178:	f993 3000 	ldrsb.w	r3, [r3]
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <PomodoroTask+0x338>)
 800117e:	4959      	ldr	r1, [pc, #356]	; (80012e4 <PomodoroTask+0x340>)
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd01 	bl	8000b88 <PomodoroDisplayOwnSetting>
			}
			if(PomodoroDisplayToggleUpdate())
 8001186:	f7ff fc39 	bl	80009fc <PomodoroDisplayToggleUpdate>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <PomodoroTask+0x1f2>
			{
				PomodoroDisplayToggle(&PressToConfirm);
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <PomodoroTask+0x334>)
 8001192:	f7ff fc93 	bl	8000abc <PomodoroDisplayToggle>
			}
			if(ButtonIsPressed())
 8001196:	f7ff f85d 	bl	8000254 <ButtonIsPressed>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 81e6 	beq.w	800156e <PomodoroTask+0x5ca>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 80011a2:	2100      	movs	r1, #0
 80011a4:	4846      	ldr	r0, [pc, #280]	; (80012c0 <PomodoroTask+0x31c>)
 80011a6:	f7ff f881 	bl	80002ac <BuzzerPlay>
				EncoderSetValue(4);
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff f95a 	bl	8000464 <EncoderSetValue>
				Pomodoro->ShortRestTime = presentValue;
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <PomodoroTask+0x328>)
 80011b2:	f993 3000 	ldrsb.w	r3, [r3]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	711a      	strb	r2, [r3, #4]
				Pomodoro->State = SET_CYCLE_LONG_REST;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2205      	movs	r2, #5
 80011c0:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayClearDisplay();
 80011c2:	f7ff fe25 	bl	8000e10 <PomodoroDisplayClearDisplay>
			}
			break;
 80011c6:	e1d2      	b.n	800156e <PomodoroTask+0x5ca>
		case SET_CYCLE_LONG_REST:
			if(EncoderHasChange())
 80011c8:	f7ff f95c 	bl	8000484 <EncoderHasChange>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00d      	beq.n	80011ee <PomodoroTask+0x24a>
			{
				presentValue = (int)EncoderReadPosition();
 80011d2:	f7ff f977 	bl	80004c4 <EncoderReadPosition>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <PomodoroTask+0x328>)
 80011dc:	701a      	strb	r2, [r3, #0]

				PomodoroDisplayOwnSetting(presentValue, "Long rest in each?" , "%2d cycle");
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <PomodoroTask+0x328>)
 80011e0:	f993 3000 	ldrsb.w	r3, [r3]
 80011e4:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <PomodoroTask+0x344>)
 80011e6:	4941      	ldr	r1, [pc, #260]	; (80012ec <PomodoroTask+0x348>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fccd 	bl	8000b88 <PomodoroDisplayOwnSetting>
			}
			if(PomodoroDisplayToggleUpdate())
 80011ee:	f7ff fc05 	bl	80009fc <PomodoroDisplayToggleUpdate>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <PomodoroTask+0x25a>
			{
				PomodoroDisplayToggle(&PressToConfirm);
 80011f8:	4837      	ldr	r0, [pc, #220]	; (80012d8 <PomodoroTask+0x334>)
 80011fa:	f7ff fc5f 	bl	8000abc <PomodoroDisplayToggle>
			}
			if(ButtonIsPressed())
 80011fe:	f7ff f829 	bl	8000254 <ButtonIsPressed>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 81b4 	beq.w	8001572 <PomodoroTask+0x5ce>
			{

				BuzzerPlay(&Buzzer,PRESSED);
 800120a:	2100      	movs	r1, #0
 800120c:	482c      	ldr	r0, [pc, #176]	; (80012c0 <PomodoroTask+0x31c>)
 800120e:	f7ff f84d 	bl	80002ac <BuzzerPlay>
				EncoderSetValue(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f7ff f926 	bl	8000464 <EncoderSetValue>
				Pomodoro->LongRestCycle = presentValue;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <PomodoroTask+0x328>)
 800121a:	f993 3000 	ldrsb.w	r3, [r3]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	71da      	strb	r2, [r3, #7]
				Pomodoro->State = SET_LONG_REST_TIME;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2206      	movs	r2, #6
 8001228:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayClearDisplay();
 800122a:	f7ff fdf1 	bl	8000e10 <PomodoroDisplayClearDisplay>
			}
			break;
 800122e:	e1a0      	b.n	8001572 <PomodoroTask+0x5ce>
		case SET_LONG_REST_TIME:
			if(EncoderHasChange())
 8001230:	f7ff f928 	bl	8000484 <EncoderHasChange>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00d      	beq.n	8001256 <PomodoroTask+0x2b2>
			{
				presentValue = (int)EncoderReadPosition();
 800123a:	f7ff f943 	bl	80004c4 <EncoderReadPosition>
 800123e:	4603      	mov	r3, r0
 8001240:	b25a      	sxtb	r2, r3
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <PomodoroTask+0x328>)
 8001244:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayOwnSetting(presentValue, "Time of long rest?", "%2d min");
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <PomodoroTask+0x328>)
 8001248:	f993 3000 	ldrsb.w	r3, [r3]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <PomodoroTask+0x338>)
 800124e:	4928      	ldr	r1, [pc, #160]	; (80012f0 <PomodoroTask+0x34c>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc99 	bl	8000b88 <PomodoroDisplayOwnSetting>
			}
			if(PomodoroDisplayToggleUpdate())
 8001256:	f7ff fbd1 	bl	80009fc <PomodoroDisplayToggleUpdate>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <PomodoroTask+0x2c2>
			{
				PomodoroDisplayToggle(&PressToConfirm);
 8001260:	481d      	ldr	r0, [pc, #116]	; (80012d8 <PomodoroTask+0x334>)
 8001262:	f7ff fc2b 	bl	8000abc <PomodoroDisplayToggle>
			}
			if(ButtonIsPressed())
 8001266:	f7fe fff5 	bl	8000254 <ButtonIsPressed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8182 	beq.w	8001576 <PomodoroTask+0x5d2>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 8001272:	2100      	movs	r1, #0
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <PomodoroTask+0x31c>)
 8001276:	f7ff f819 	bl	80002ac <BuzzerPlay>
				EncoderSetValue(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff f8f2 	bl	8000464 <EncoderSetValue>
				Pomodoro->LongRestTime = presentValue;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <PomodoroTask+0x328>)
 8001282:	f993 3000 	ldrsb.w	r3, [r3]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	715a      	strb	r2, [r3, #5]
				Pomodoro->State = PRESENT_SETUP;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2207      	movs	r2, #7
 8001290:	701a      	strb	r2, [r3, #0]
				PomodoroDisplayPresentSetup(Pomodoro);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fca8 	bl	8000be8 <PomodoroDisplayPresentSetup>
			}
			break;
 8001298:	e16d      	b.n	8001576 <PomodoroTask+0x5d2>
		case PRESENT_SETUP:
			if(PomodoroDisplayToggleUpdate())
 800129a:	f7ff fbaf 	bl	80009fc <PomodoroDisplayToggleUpdate>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d031      	beq.n	8001308 <PomodoroTask+0x364>
			{
				if(DEVIDED_BY_2(EncoderReadPosition()))
 80012a4:	f7ff f90e 	bl	80004c4 <EncoderReadPosition>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d124      	bne.n	80012fc <PomodoroTask+0x358>
				{
					PomodoroDisplayToggle(&EditSetup);
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <PomodoroTask+0x350>)
 80012b4:	f7ff fc02 	bl	8000abc <PomodoroDisplayToggle>
					PomodoroDisplaySwitchOffToggle(&StartWork);
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <PomodoroTask+0x354>)
 80012ba:	f7ff fbd8 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
 80012be:	e023      	b.n	8001308 <PomodoroTask+0x364>
 80012c0:	20000530 	.word	0x20000530
 80012c4:	20000524 	.word	0x20000524
 80012c8:	2000054c 	.word	0x2000054c
 80012cc:	20000098 	.word	0x20000098
 80012d0:	08005154 	.word	0x08005154
 80012d4:	08005160 	.word	0x08005160
 80012d8:	2000057c 	.word	0x2000057c
 80012dc:	08005174 	.word	0x08005174
 80012e0:	0800517c 	.word	0x0800517c
 80012e4:	08005188 	.word	0x08005188
 80012e8:	0800519c 	.word	0x0800519c
 80012ec:	080051a8 	.word	0x080051a8
 80012f0:	080051bc 	.word	0x080051bc
 80012f4:	20000558 	.word	0x20000558
 80012f8:	20000540 	.word	0x20000540
				}
				else
				{
					PomodoroDisplaySwitchOffToggle(&EditSetup);
 80012fc:	48a5      	ldr	r0, [pc, #660]	; (8001594 <PomodoroTask+0x5f0>)
 80012fe:	f7ff fbb6 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
					PomodoroDisplayToggle(&StartWork);
 8001302:	48a5      	ldr	r0, [pc, #660]	; (8001598 <PomodoroTask+0x5f4>)
 8001304:	f7ff fbda 	bl	8000abc <PomodoroDisplayToggle>
				}
			}
			if(ButtonIsPressed())
 8001308:	f7fe ffa4 	bl	8000254 <ButtonIsPressed>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8133 	beq.w	800157a <PomodoroTask+0x5d6>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 8001314:	2100      	movs	r1, #0
 8001316:	48a1      	ldr	r0, [pc, #644]	; (800159c <PomodoroTask+0x5f8>)
 8001318:	f7fe ffc8 	bl	80002ac <BuzzerPlay>
				if(DEVIDED_BY_2(EncoderReadPosition()))
 800131c:	f7ff f8d2 	bl	80004c4 <EncoderReadPosition>
 8001320:	4603      	mov	r3, r0
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <PomodoroTask+0x38e>
				{
					Pomodoro->State = IDLE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
				else
				{
					Pomodoro->State = START_COUTING;
				}
			}
			break;
 8001330:	e123      	b.n	800157a <PomodoroTask+0x5d6>
					Pomodoro->State = START_COUTING;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	701a      	strb	r2, [r3, #0]
			break;
 8001338:	e11f      	b.n	800157a <PomodoroTask+0x5d6>
		case START_COUTING:
			EncoderSetWorking(false);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff f8cc 	bl	80004d8 <EncoderSetWorking>
			Pomodoro->ActualTimer = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	815a      	strh	r2, [r3, #10]
			HAL_TIM_Base_Start_IT(&htim3);
 8001346:	4896      	ldr	r0, [pc, #600]	; (80015a0 <PomodoroTask+0x5fc>)
 8001348:	f002 fb3e 	bl	80039c8 <HAL_TIM_Base_Start_IT>
			Pomodoro->State = COUNTING_WORK;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2209      	movs	r2, #9
 8001350:	701a      	strb	r2, [r3, #0]
			Pomodoro->Cycle++;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7a1b      	ldrb	r3, [r3, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	721a      	strb	r2, [r3, #8]
			break;
 800135e:	e115      	b.n	800158c <PomodoroTask+0x5e8>
		case COUNTING_WORK:
			if(PomodoroDisplayUpdate())
 8001360:	f7ff fb3a 	bl	80009d8 <PomodoroDisplayUpdate>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <PomodoroTask+0x3ce>
			{
				PomodoroDisplayStateOfWork(WORK, Pomodoro);
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fc9f 	bl	8000cb0 <PomodoroDisplayStateOfWork>
			}
			if(ButtonIsPressed())
 8001372:	f7fe ff6f 	bl	8000254 <ButtonIsPressed>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <PomodoroTask+0x3f0>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 800137c:	2100      	movs	r1, #0
 800137e:	4887      	ldr	r0, [pc, #540]	; (800159c <PomodoroTask+0x5f8>)
 8001380:	f7fe ff94 	bl	80002ac <BuzzerPlay>

				Pomodoro->PreviousState = Pomodoro->State;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	705a      	strb	r2, [r3, #1]
				Pomodoro->State = PREPERE_TO_PAUSE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	220b      	movs	r2, #11
 8001390:	701a      	strb	r2, [r3, #0]
				break;
 8001392:	e0fb      	b.n	800158c <PomodoroTask+0x5e8>
			}
			if((MIN_TO_SEC(Pomodoro->WorkTime)) == Pomodoro->ActualTimer)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	461a      	mov	r2, r3
 800139a:	4613      	mov	r3, r2
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	895b      	ldrh	r3, [r3, #10]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f040 80e8 	bne.w	800157e <PomodoroTask+0x5da>
			{
				Pomodoro->ActualTimer = 0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	815a      	strh	r2, [r3, #10]
				if( Pomodoro->RepeatCycle == Pomodoro->Cycle)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7a5a      	ldrb	r2, [r3, #9]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7a1b      	ldrb	r3, [r3, #8]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d103      	bne.n	80013c8 <PomodoroTask+0x424>
				{
					Pomodoro->State = DISPLAY_FINISH;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	220d      	movs	r2, #13
 80013c4:	701a      	strb	r2, [r3, #0]
				  	{
				  		Pomodoro->RestTime = Pomodoro->ShortRestTime;
				  	}
				}
			}
			break;
 80013c6:	e0da      	b.n	800157e <PomodoroTask+0x5da>
					BuzzerPlay(&Buzzer,CHANGE_STEP);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4874      	ldr	r0, [pc, #464]	; (800159c <PomodoroTask+0x5f8>)
 80013cc:	f7fe ff6e 	bl	80002ac <BuzzerPlay>
					Pomodoro->State = COUNTING_REST;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	220a      	movs	r2, #10
 80013d4:	701a      	strb	r2, [r3, #0]
				  	if(0 == (Pomodoro->Cycle%Pomodoro->LongRestCycle))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7a1b      	ldrb	r3, [r3, #8]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	79d2      	ldrb	r2, [r2, #7]
 80013de:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e2:	fb02 f201 	mul.w	r2, r2, r1
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d104      	bne.n	80013f8 <PomodoroTask+0x454>
				  		Pomodoro->RestTime = Pomodoro->LongRestTime;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	795a      	ldrb	r2, [r3, #5]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	70da      	strb	r2, [r3, #3]
			break;
 80013f6:	e0c2      	b.n	800157e <PomodoroTask+0x5da>
				  		Pomodoro->RestTime = Pomodoro->ShortRestTime;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791a      	ldrb	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	70da      	strb	r2, [r3, #3]
			break;
 8001400:	e0bd      	b.n	800157e <PomodoroTask+0x5da>
		case COUNTING_REST:
			if(PomodoroDisplayUpdate())
 8001402:	f7ff fae9 	bl	80009d8 <PomodoroDisplayUpdate>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <PomodoroTask+0x470>
			{
				PomodoroDisplayStateOfWork(REST, Pomodoro);
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fc4e 	bl	8000cb0 <PomodoroDisplayStateOfWork>
			}
			if(ButtonIsPressed())
 8001414:	f7fe ff1e 	bl	8000254 <ButtonIsPressed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <PomodoroTask+0x492>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 800141e:	2100      	movs	r1, #0
 8001420:	485e      	ldr	r0, [pc, #376]	; (800159c <PomodoroTask+0x5f8>)
 8001422:	f7fe ff43 	bl	80002ac <BuzzerPlay>
				Pomodoro->PreviousState = Pomodoro->State;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	705a      	strb	r2, [r3, #1]
				Pomodoro->State = PREPERE_TO_PAUSE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	220b      	movs	r2, #11
 8001432:	701a      	strb	r2, [r3, #0]
				break;
 8001434:	e0aa      	b.n	800158c <PomodoroTask+0x5e8>
			}
			if((MIN_TO_SEC(Pomodoro->RestTime)) == Pomodoro->ActualTimer)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	78db      	ldrb	r3, [r3, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	4613      	mov	r3, r2
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	895b      	ldrh	r3, [r3, #10]
 800144a:	429a      	cmp	r2, r3
 800144c:	f040 8099 	bne.w	8001582 <PomodoroTask+0x5de>
			{
				Pomodoro->ActualTimer = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	815a      	strh	r2, [r3, #10]
				Pomodoro->Cycle++;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7a1b      	ldrb	r3, [r3, #8]
 800145a:	3301      	adds	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	721a      	strb	r2, [r3, #8]
				Pomodoro->State = COUNTING_WORK;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2209      	movs	r2, #9
 8001466:	701a      	strb	r2, [r3, #0]
				BuzzerPlay(&Buzzer,CHANGE_STEP);
 8001468:	2101      	movs	r1, #1
 800146a:	484c      	ldr	r0, [pc, #304]	; (800159c <PomodoroTask+0x5f8>)
 800146c:	f7fe ff1e 	bl	80002ac <BuzzerPlay>
			}
			break;
 8001470:	e087      	b.n	8001582 <PomodoroTask+0x5de>
		case PREPERE_TO_PAUSE:
			Pomodoro->TimerBeforePause = Pomodoro->ActualTimer;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	895a      	ldrh	r2, [r3, #10]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	819a      	strh	r2, [r3, #12]
			PomodoroDisplayPause();
 800147a:	f7ff fca1 	bl	8000dc0 <PomodoroDisplayPause>
			EncoderSetWorking(true);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff f82a 	bl	80004d8 <EncoderSetWorking>
			EncoderSetValue(0);
 8001484:	2000      	movs	r0, #0
 8001486:	f7fe ffed 	bl	8000464 <EncoderSetValue>
			Pomodoro->State = PAUSE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	220c      	movs	r2, #12
 800148e:	701a      	strb	r2, [r3, #0]
			break;
 8001490:	e07c      	b.n	800158c <PomodoroTask+0x5e8>
		case PAUSE:
			if(PomodoroDisplayToggleUpdate())
 8001492:	f7ff fab3 	bl	80009fc <PomodoroDisplayToggleUpdate>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <PomodoroTask+0x520>
			{
				if(DEVIDED_BY_2(EncoderReadPosition()))
 800149c:	f7ff f812 	bl	80004c4 <EncoderReadPosition>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <PomodoroTask+0x514>
			  	{
			  		PomodoroDisplayToggle(&BackToPomodoroText);
 80014aa:	483e      	ldr	r0, [pc, #248]	; (80015a4 <PomodoroTask+0x600>)
 80014ac:	f7ff fb06 	bl	8000abc <PomodoroDisplayToggle>
			  		PomodoroDisplaySwitchOffToggle(&ExitFromCycleText);
 80014b0:	483d      	ldr	r0, [pc, #244]	; (80015a8 <PomodoroTask+0x604>)
 80014b2:	f7ff fadc 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
 80014b6:	e005      	b.n	80014c4 <PomodoroTask+0x520>
			  	}
			  	else
			  	{
			  		PomodoroDisplaySwitchOffToggle(&BackToPomodoroText);
 80014b8:	483a      	ldr	r0, [pc, #232]	; (80015a4 <PomodoroTask+0x600>)
 80014ba:	f7ff fad8 	bl	8000a6e <PomodoroDisplaySwitchOffToggle>
			  		PomodoroDisplayToggle(&ExitFromCycleText);
 80014be:	483a      	ldr	r0, [pc, #232]	; (80015a8 <PomodoroTask+0x604>)
 80014c0:	f7ff fafc 	bl	8000abc <PomodoroDisplayToggle>
			  	}
			}
			if(ButtonIsPressed())
 80014c4:	f7fe fec6 	bl	8000254 <ButtonIsPressed>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d05b      	beq.n	8001586 <PomodoroTask+0x5e2>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 80014ce:	2100      	movs	r1, #0
 80014d0:	4832      	ldr	r0, [pc, #200]	; (800159c <PomodoroTask+0x5f8>)
 80014d2:	f7fe feeb 	bl	80002ac <BuzzerPlay>
			  	EncoderSetWorking(false);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7fe fffe 	bl	80004d8 <EncoderSetWorking>
			  	if(DEVIDED_BY_2(EncoderReadPosition()))
 80014dc:	f7fe fff2 	bl	80004c4 <EncoderReadPosition>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d108      	bne.n	80014fc <PomodoroTask+0x558>
			  	{
			  		Pomodoro->ActualTimer = Pomodoro->TimerBeforePause;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	899a      	ldrh	r2, [r3, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	815a      	strh	r2, [r3, #10]
			  		Pomodoro->State = Pomodoro->PreviousState;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	785a      	ldrb	r2, [r3, #1]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	701a      	strb	r2, [r3, #0]
			  	else
			  	{
			  		Pomodoro->State = RETURNING_TO_IDLE;
			  	}
			}
			break;
 80014fa:	e044      	b.n	8001586 <PomodoroTask+0x5e2>
			  		Pomodoro->State = RETURNING_TO_IDLE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	220f      	movs	r2, #15
 8001500:	701a      	strb	r2, [r3, #0]
			break;
 8001502:	e040      	b.n	8001586 <PomodoroTask+0x5e2>
		case DISPLAY_FINISH:
			BuzzerPlay(&Buzzer,FINISH);
 8001504:	2102      	movs	r1, #2
 8001506:	4825      	ldr	r0, [pc, #148]	; (800159c <PomodoroTask+0x5f8>)
 8001508:	f7fe fed0 	bl	80002ac <BuzzerPlay>
			HAL_TIM_Base_Stop_IT(&htim3);
 800150c:	4824      	ldr	r0, [pc, #144]	; (80015a0 <PomodoroTask+0x5fc>)
 800150e:	f002 faad 	bl	8003a6c <HAL_TIM_Base_Stop_IT>
			PomodoroDisplayFinish();
 8001512:	f7ff fc69 	bl	8000de8 <PomodoroDisplayFinish>
			Pomodoro->State = LEAVE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	220e      	movs	r2, #14
 800151a:	701a      	strb	r2, [r3, #0]
			break;
 800151c:	e036      	b.n	800158c <PomodoroTask+0x5e8>
		case LEAVE:
			if(PomodoroDisplayToggleUpdate())
 800151e:	f7ff fa6d 	bl	80009fc <PomodoroDisplayToggleUpdate>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <PomodoroTask+0x58a>
			{
				PomodoroDisplayToggle(&BackToMenu);
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <PomodoroTask+0x608>)
 800152a:	f7ff fac7 	bl	8000abc <PomodoroDisplayToggle>
			}
			if(ButtonIsPressed())
 800152e:	f7fe fe91 	bl	8000254 <ButtonIsPressed>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d028      	beq.n	800158a <PomodoroTask+0x5e6>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 8001538:	2100      	movs	r1, #0
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <PomodoroTask+0x5f8>)
 800153c:	f7fe feb6 	bl	80002ac <BuzzerPlay>
				Pomodoro->State = RETURNING_TO_IDLE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	220f      	movs	r2, #15
 8001544:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001546:	e020      	b.n	800158a <PomodoroTask+0x5e6>
		case RETURNING_TO_IDLE:
			EncoderSetValue(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7fe ff8b 	bl	8000464 <EncoderSetValue>
			Pomodoro->State = IDLE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
			Pomodoro->Cycle = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	721a      	strb	r2, [r3, #8]
			Pomodoro->ActualTimer = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	815a      	strh	r2, [r3, #10]
			break;
 8001560:	e014      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001562:	bf00      	nop
 8001564:	e012      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001566:	bf00      	nop
 8001568:	e010      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 800156a:	bf00      	nop
 800156c:	e00e      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 800156e:	bf00      	nop
 8001570:	e00c      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001572:	bf00      	nop
 8001574:	e00a      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001576:	bf00      	nop
 8001578:	e008      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 800157a:	bf00      	nop
 800157c:	e006      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 800157e:	bf00      	nop
 8001580:	e004      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001582:	bf00      	nop
 8001584:	e002      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <PomodoroTask+0x5e8>
			break;
 800158a:	bf00      	nop
	}
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000558 	.word	0x20000558
 8001598:	20000540 	.word	0x20000540
 800159c:	20000530 	.word	0x20000530
 80015a0:	20000610 	.word	0x20000610
 80015a4:	20000518 	.word	0x20000518
 80015a8:	20000564 	.word	0x20000564
 80015ac:	20000570 	.word	0x20000570

080015b0 <SSD1306_Command>:

I2C_HandleTypeDef *oled_i2c;
static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS, 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <SSD1306_Command+0x30>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2200      	movs	r2, #0
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	f001 fa33 	bl	8002a3c <HAL_I2C_Mem_Write>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000588 	.word	0x20000588

080015e4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS, 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <SSD1306_Data+0x30>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	2178      	movs	r1, #120	; 0x78
 8001608:	f001 fa18 	bl	8002a3c <HAL_I2C_Mem_Write>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000588 	.word	0x20000588

08001618 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	80bb      	strh	r3, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db79      	blt.n	8001726 <SSD1306_DrawPixel+0x10e>
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	2b7f      	cmp	r3, #127	; 0x7f
 8001638:	dc75      	bgt.n	8001726 <SSD1306_DrawPixel+0x10e>
 800163a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db71      	blt.n	8001726 <SSD1306_DrawPixel+0x10e>
 8001642:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001646:	2b3f      	cmp	r3, #63	; 0x3f
 8001648:	dc6d      	bgt.n	8001726 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d049      	beq.n	80016e4 <SSD1306_DrawPixel+0xcc>
 8001650:	2b02      	cmp	r3, #2
 8001652:	dc69      	bgt.n	8001728 <SSD1306_DrawPixel+0x110>
 8001654:	2b00      	cmp	r3, #0
 8001656:	d022      	beq.n	800169e <SSD1306_DrawPixel+0x86>
 8001658:	2b01      	cmp	r3, #1
 800165a:	d165      	bne.n	8001728 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800165c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da00      	bge.n	800166a <SSD1306_DrawPixel+0x52>
 8001668:	3307      	adds	r3, #7
 800166a:	10db      	asrs	r3, r3, #3
 800166c:	b218      	sxth	r0, r3
 800166e:	4603      	mov	r3, r0
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	4413      	add	r3, r2
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <SSD1306_DrawPixel+0x118>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	b25a      	sxtb	r2, r3
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b259      	sxtb	r1, r3
 800168c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <SSD1306_DrawPixel+0x118>)
 800169a:	54d1      	strb	r1, [r2, r3]
      break;
 800169c:	e044      	b.n	8001728 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800169e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da00      	bge.n	80016ac <SSD1306_DrawPixel+0x94>
 80016aa:	3307      	adds	r3, #7
 80016ac:	10db      	asrs	r3, r3, #3
 80016ae:	b218      	sxth	r0, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	01db      	lsls	r3, r3, #7
 80016b4:	4413      	add	r3, r2
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <SSD1306_DrawPixel+0x118>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4013      	ands	r3, r2
 80016d0:	b259      	sxtb	r1, r3
 80016d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	4413      	add	r3, r2
 80016dc:	b2c9      	uxtb	r1, r1
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <SSD1306_DrawPixel+0x118>)
 80016e0:	54d1      	strb	r1, [r2, r3]
      break;
 80016e2:	e021      	b.n	8001728 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80016e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da00      	bge.n	80016f2 <SSD1306_DrawPixel+0xda>
 80016f0:	3307      	adds	r3, #7
 80016f2:	10db      	asrs	r3, r3, #3
 80016f4:	b218      	sxth	r0, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	01db      	lsls	r3, r3, #7
 80016fa:	4413      	add	r3, r2
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <SSD1306_DrawPixel+0x118>)
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	b25a      	sxtb	r2, r3
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	b25b      	sxtb	r3, r3
 8001710:	4053      	eors	r3, r2
 8001712:	b259      	sxtb	r1, r3
 8001714:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001718:	4603      	mov	r3, r0
 800171a:	01db      	lsls	r3, r3, #7
 800171c:	4413      	add	r3, r2
 800171e:	b2c9      	uxtb	r1, r1
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <SSD1306_DrawPixel+0x118>)
 8001722:	54d1      	strb	r1, [r2, r3]
      break;
 8001724:	e000      	b.n	8001728 <SSD1306_DrawPixel+0x110>
	  return;
 8001726:	bf00      	nop
    }
}
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	2000009c 	.word	0x2000009c

08001734 <SSD1306_Clear>:



void SSD1306_Clear(uint8_t Color)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <SSD1306_Clear+0x22>
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10d      	bne.n	8001764 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174c:	21ff      	movs	r1, #255	; 0xff
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <SSD1306_Clear+0x38>)
 8001750:	f002 fffc 	bl	800474c <memset>
		break;
 8001754:	e006      	b.n	8001764 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175a:	2100      	movs	r1, #0
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <SSD1306_Clear+0x38>)
 800175e:	f002 fff5 	bl	800474c <memset>
		break;
 8001762:	bf00      	nop
	}
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000009c 	.word	0x2000009c

08001770 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001774:	2022      	movs	r0, #34	; 0x22
 8001776:	f7ff ff1b 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff18 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001780:	20ff      	movs	r0, #255	; 0xff
 8001782:	f7ff ff15 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001786:	2021      	movs	r0, #33	; 0x21
 8001788:	f7ff ff12 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ff0f 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001792:	207f      	movs	r0, #127	; 0x7f
 8001794:	f7ff ff0c 	bl	80015b0 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <SSD1306_Display+0x38>)
 800179e:	f7ff ff21 	bl	80015e4 <SSD1306_Data>

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000009c 	.word	0x2000009c

080017ac <SSD1306_Init>:


void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80017b4:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <SSD1306_Init+0xb4>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
	SSD1306_Command(SSD1306_DISPLAYOFF);
 80017ba:	20ae      	movs	r0, #174	; 0xae
 80017bc:	f7ff fef8 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80017c0:	20d5      	movs	r0, #213	; 0xd5
 80017c2:	f7ff fef5 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x80);
 80017c6:	2080      	movs	r0, #128	; 0x80
 80017c8:	f7ff fef2 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 80017cc:	20a8      	movs	r0, #168	; 0xa8
 80017ce:	f7ff feef 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80017d2:	203f      	movs	r0, #63	; 0x3f
 80017d4:	f7ff feec 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80017d8:	20d3      	movs	r0, #211	; 0xd3
 80017da:	f7ff fee9 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x00);
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fee6 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80017e4:	2040      	movs	r0, #64	; 0x40
 80017e6:	f7ff fee3 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80017ea:	208d      	movs	r0, #141	; 0x8d
 80017ec:	f7ff fee0 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x14);
 80017f0:	2014      	movs	r0, #20
 80017f2:	f7ff fedd 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 80017f6:	2020      	movs	r0, #32
 80017f8:	f7ff feda 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x00);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fed7 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP| 0x1);
 8001802:	20a1      	movs	r0, #161	; 0xa1
 8001804:	f7ff fed4 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001808:	20c8      	movs	r0, #200	; 0xc8
 800180a:	f7ff fed1 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800180e:	20da      	movs	r0, #218	; 0xda
 8001810:	f7ff fece 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001814:	2012      	movs	r0, #18
 8001816:	f7ff fecb 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800181a:	2081      	movs	r0, #129	; 0x81
 800181c:	f7ff fec8 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001820:	20ff      	movs	r0, #255	; 0xff
 8001822:	f7ff fec5 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE);
 8001826:	20d9      	movs	r0, #217	; 0xd9
 8001828:	f7ff fec2 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800182c:	20f1      	movs	r0, #241	; 0xf1
 800182e:	f7ff febf 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001832:	20db      	movs	r0, #219	; 0xdb
 8001834:	f7ff febc 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001838:	2040      	movs	r0, #64	; 0x40
 800183a:	f7ff feb9 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800183e:	20a4      	movs	r0, #164	; 0xa4
 8001840:	f7ff feb6 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001844:	20a6      	movs	r0, #166	; 0xa6
 8001846:	f7ff feb3 	bl	80015b0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800184a:	202e      	movs	r0, #46	; 0x2e
 800184c:	f7ff feb0 	bl	80015b0 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001850:	20af      	movs	r0, #175	; 0xaf
 8001852:	f7ff fead 	bl	80015b0 <SSD1306_Command>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000588 	.word	0x20000588

08001864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_GPIO_Init+0xd8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a2f      	ldr	r2, [pc, #188]	; (800193c <MX_GPIO_Init+0xd8>)
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0xd8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_GPIO_Init+0xd8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <MX_GPIO_Init+0xd8>)
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <MX_GPIO_Init+0xd8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <MX_GPIO_Init+0xd8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <MX_GPIO_Init+0xd8>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_GPIO_Init+0xd8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_GPIO_Init+0xd8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <MX_GPIO_Init+0xd8>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_GPIO_Init+0xd8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_GPIO_Init+0xdc>)
 80018de:	f000 ff2e 	bl	800273e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_GPIO_Init+0xe0>)
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_GPIO_Init+0xe4>)
 80018f8:	f000 fd86 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80018fc:	2320      	movs	r3, #32
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2302      	movs	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <MX_GPIO_Init+0xdc>)
 8001914:	f000 fd78 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_GPIO_Init+0xe8>)
 800192e:	f000 fd6b 	bl	8002408 <HAL_GPIO_Init>

}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800
 8001944:	10210000 	.word	0x10210000
 8001948:	40011000 	.word	0x40011000
 800194c:	40010c00 	.word	0x40010c00

08001950 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <MX_I2C1_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2C1_Init+0x50>)
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x58>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_I2C1_Init+0x50>)
 800196e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2C1_Init+0x50>)
 800198e:	f000 ff11 	bl	80027b4 <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 f91e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000058c 	.word	0x2000058c
 80019a4:	40005400 	.word	0x40005400
 80019a8:	000186a0 	.word	0x000186a0

080019ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_I2C_MspInit+0x90>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d132      	bne.n	8001a32 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4812      	ldr	r0, [pc, #72]	; (8001a44 <HAL_I2C_MspInit+0x98>)
 80019fa:	f000 fd05 	bl	8002408 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_I2C_MspInit+0x9c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_I2C_MspInit+0x9c>)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 8001a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_I2C_MspInit+0x94>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40010000 	.word	0x40010000

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a50:	f000 fb6a 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a54:	f000 f83e 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a58:	f7ff ff04 	bl	8001864 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a5c:	f7ff ff78 	bl	8001950 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001a60:	f000 fad4 	bl	800200c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001a64:	f000 fa14 	bl	8001e90 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001a68:	f000 f96e 	bl	8001d48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a6c:	f000 f9c2 	bl	8001df4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a70:	f000 f86b 	bl	8001b4a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <main+0x6c>)
 8001a76:	f001 ffa7 	bl	80039c8 <HAL_TIM_Base_Start_IT>

  /*
   * Initalization of Display
   */
  SSD1306_Init(&hi2c1);
 8001a7a:	4810      	ldr	r0, [pc, #64]	; (8001abc <main+0x70>)
 8001a7c:	f7ff fe96 	bl	80017ac <SSD1306_Init>
  GFX_SetFont(font_8x5);
 8001a80:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <main+0x74>)
 8001a82:	f7fe fd4f 	bl	8000524 <GFX_SetFont>
  GFX_SetFontSize(1);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7fe fd5a 	bl	8000540 <GFX_SetFontSize>

  EncoderInit(&MainEncoder);
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <main+0x78>)
 8001a8e:	f7fe fc71 	bl	8000374 <EncoderInit>
  ButtonInit(&MainButton,ENCODER_BUTTON_GPIO_Port,ENCODER_BUTTON_Pin);
 8001a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a96:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <main+0x7c>)
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <main+0x80>)
 8001a9a:	f7fe fb57 	bl	800014c <ButtonInit>
  PomodoroInit(&MainPomodoro);
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <main+0x84>)
 8001aa0:	f7ff f9be 	bl	8000e20 <PomodoroInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EncoderTask(&MainEncoder);
 8001aa4:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <main+0x78>)
 8001aa6:	f7fe fc75 	bl	8000394 <EncoderTask>
	  ButtonTask(&MainButton);
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <main+0x80>)
 8001aac:	f7fe fb6c 	bl	8000188 <ButtonTask>
	  PomodoroTask(&MainPomodoro);
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <main+0x84>)
 8001ab2:	f7ff fa77 	bl	8000fa4 <PomodoroTask>
	  EncoderTask(&MainEncoder);
 8001ab6:	e7f5      	b.n	8001aa4 <main+0x58>
 8001ab8:	20000658 	.word	0x20000658
 8001abc:	2000058c 	.word	0x2000058c
 8001ac0:	080051d0 	.word	0x080051d0
 8001ac4:	200005e0 	.word	0x200005e0
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	200005ec 	.word	0x200005ec
 8001ad0:	20000600 	.word	0x20000600

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0318 	add.w	r3, r7, #24
 8001ade:	2228      	movs	r2, #40	; 0x28
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fe32 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001afa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001afe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 faff 	bl	800310c <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001b14:	f000 f860 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fd6a 	bl	800360c <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b3e:	f000 f84b 	bl	8001bd8 <Error_Handler>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3740      	adds	r7, #64	; 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	201d      	movs	r0, #29
 8001b54:	f000 fc21 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b58:	201d      	movs	r0, #29
 8001b5a:	f000 fc3a 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2028      	movs	r0, #40	; 0x28
 8001b64:	f000 fc19 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b68:	2028      	movs	r0, #40	; 0x28
 8001b6a:	f000 fc32 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2101      	movs	r1, #1
 8001b72:	201c      	movs	r0, #28
 8001b74:	f000 fc11 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b78:	201c      	movs	r0, #28
 8001b7a:	f000 fc2a 	bl	80023d2 <HAL_NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10a      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8001b96:	480d      	ldr	r0, [pc, #52]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b98:	f001 ff16 	bl	80039c8 <HAL_TIM_Base_Start_IT>

		MainPomodoro.ActualTimer++;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b9e:	895b      	ldrh	r3, [r3, #10]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ba6:	815a      	strh	r2, [r3, #10]
		PomodoroDisplay_SetUpdate();
 8001ba8:	f7fe fefe 	bl	80009a8 <PomodoroDisplay_SetUpdate>
	}
	if(htim->Instance == TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d104      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bb8:	f001 ff06 	bl	80039c8 <HAL_TIM_Base_Start_IT>

		PomodoroDisplay_SetToggleUpdate();
 8001bbc:	f7fe ff00 	bl	80009c0 <PomodoroDisplay_SetToggleUpdate>
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	20000610 	.word	0x20000610
 8001bd0:	20000600 	.word	0x20000600
 8001bd4:	20000658 	.word	0x20000658

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6193      	str	r3, [r2, #24]
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_MspInit+0x60>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_MspInit+0x60>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 fa91 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM2_IRQHandler+0x10>)
 8001c9e:	f002 f8da 	bl	8003e56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000658 	.word	0x20000658

08001cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM3_IRQHandler+0x10>)
 8001cb2:	f002 f8d0 	bl	8003e56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000610 	.word	0x20000610

08001cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cc8:	f000 fd52 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f002 fcfa 	bl	80046f8 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20005000 	.word	0x20005000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	2000049c 	.word	0x2000049c
 8001d38:	20000700 	.word	0x20000700

08001d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fcf8 	bl	800474c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <MX_TIM1_Init+0xa8>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d78:	221f      	movs	r2, #31
 8001d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d96:	2301      	movs	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d9e:	230f      	movs	r3, #15
 8001da0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001dae:	230f      	movs	r3, #15
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	4619      	mov	r1, r3
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001dba:	f001 fe85 	bl	8003ac8 <HAL_TIM_Encoder_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001dc4:	f7ff ff08 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_TIM1_Init+0xa4>)
 8001dd6:	f002 fb41 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001de0:	f7ff fefa 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3730      	adds	r7, #48	; 0x30
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200004ac 	.word	0x200004ac
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e1a:	f240 321f 	movw	r2, #799	; 0x31f
 8001e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5999;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e28:	f241 726f 	movw	r2, #5999	; 0x176f
 8001e2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3a:	4814      	ldr	r0, [pc, #80]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e3c:	f001 fd74 	bl	8003928 <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e46:	f7ff fec7 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4619      	mov	r1, r3
 8001e56:	480d      	ldr	r0, [pc, #52]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e58:	f002 f8ed 	bl	8004036 <HAL_TIM_ConfigClockSource>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e62:	f7ff feb9 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e74:	f002 faf2 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e7e:	f7ff feab 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000658 	.word	0x20000658

08001e90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <MX_TIM3_Init+0x98>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001eb4:	f240 321f 	movw	r2, #799	; 0x31f
 8001eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001ec2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed4:	4813      	ldr	r0, [pc, #76]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001ed6:	f001 fd27 	bl	8003928 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ee0:	f7ff fe7a 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001ef2:	f002 f8a0 	bl	8004036 <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001efc:	f7ff fe6c 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_TIM3_Init+0x94>)
 8001f0e:	f002 faa5 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f18:	f7ff fe5e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000610 	.word	0x20000610
 8001f28:	40000400 	.word	0x40000400

08001f2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d124      	bne.n	8001f96 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f92:	f000 fa39 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800

08001fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001fd6:	e010      	b.n	8001ffa <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_TIM_Base_MspInit+0x5c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_TIM_Base_MspInit+0x58>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000
 8002008:	40000400 	.word	0x40000400

0800200c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_USART2_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002044:	f002 fa7a 	bl	800453c <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f7ff fdc3 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200006a0 	.word	0x200006a0
 800205c:	40004400 	.word	0x40004400

08002060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0x70>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d123      	bne.n	80020c8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_UART_MspInit+0x74>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_UART_MspInit+0x74>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x74>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_UART_MspInit+0x74>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_UART_MspInit+0x74>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_UART_MspInit+0x74>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b0:	230c      	movs	r3, #12
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	4619      	mov	r1, r3
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_UART_MspInit+0x78>)
 80020c4:	f000 f9a0 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010800 	.word	0x40010800

080020dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020dc:	f7ff fe2e 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020e2:	490c      	ldr	r1, [pc, #48]	; (8002114 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020f8:	4c09      	ldr	r4, [pc, #36]	; (8002120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f002 fafd 	bl	8004704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210a:	f7ff fc9f 	bl	8001a4c <main>
  bx lr
 800210e:	4770      	bx	lr
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002118:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 800211c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002120:	200006fc 	.word	0x200006fc

08002124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_2_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x28>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x28>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f923 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fd4e 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f93b 	bl	80023ee <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f903 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000004 	.word	0x20000004
 80021ac:	2000000c 	.word	0x2000000c
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_IncTick+0x20>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <HAL_IncTick+0x20>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	2000000c 	.word	0x2000000c
 80021d4:	200006e8 	.word	0x200006e8

080021d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_GetTick+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	200006e8 	.word	0x200006e8

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4906      	ldr	r1, [pc, #24]	; (8002284 <__NVIC_EnableIRQ+0x34>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff90 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff2d 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff42 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff35 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e169      	b.n	80026f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800241c:	2201      	movs	r2, #1
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	f040 8158 	bne.w	80026ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a9a      	ldr	r2, [pc, #616]	; (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002444:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d875      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800244a:	4a98      	ldr	r2, [pc, #608]	; (80026ac <HAL_GPIO_Init+0x2a4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d058      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002450:	4a96      	ldr	r2, [pc, #600]	; (80026ac <HAL_GPIO_Init+0x2a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d86f      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002456:	4a96      	ldr	r2, [pc, #600]	; (80026b0 <HAL_GPIO_Init+0x2a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d052      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 800245c:	4a94      	ldr	r2, [pc, #592]	; (80026b0 <HAL_GPIO_Init+0x2a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d869      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002462:	4a94      	ldr	r2, [pc, #592]	; (80026b4 <HAL_GPIO_Init+0x2ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04c      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002468:	4a92      	ldr	r2, [pc, #584]	; (80026b4 <HAL_GPIO_Init+0x2ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d863      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800246e:	4a92      	ldr	r2, [pc, #584]	; (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d046      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002474:	4a90      	ldr	r2, [pc, #576]	; (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d85d      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d82a      	bhi.n	80024d4 <HAL_GPIO_Init+0xcc>
 800247e:	2b12      	cmp	r3, #18
 8002480:	d859      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_GPIO_Init+0x80>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002503 	.word	0x08002503
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024ef 	.word	0x080024ef
 8002494:	08002531 	.word	0x08002531
 8002498:	08002537 	.word	0x08002537
 800249c:	08002537 	.word	0x08002537
 80024a0:	08002537 	.word	0x08002537
 80024a4:	08002537 	.word	0x08002537
 80024a8:	08002537 	.word	0x08002537
 80024ac:	08002537 	.word	0x08002537
 80024b0:	08002537 	.word	0x08002537
 80024b4:	08002537 	.word	0x08002537
 80024b8:	08002537 	.word	0x08002537
 80024bc:	08002537 	.word	0x08002537
 80024c0:	08002537 	.word	0x08002537
 80024c4:	08002537 	.word	0x08002537
 80024c8:	08002537 	.word	0x08002537
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024f9 	.word	0x080024f9
 80024d4:	4a79      	ldr	r2, [pc, #484]	; (80026bc <HAL_GPIO_Init+0x2b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024da:	e02c      	b.n	8002536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e029      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e024      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	3308      	adds	r3, #8
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e01f      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	330c      	adds	r3, #12
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e01a      	b.n	8002538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250a:	2304      	movs	r3, #4
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e013      	b.n	8002538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002518:	2308      	movs	r3, #8
 800251a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	611a      	str	r2, [r3, #16]
          break;
 8002522:	e009      	b.n	8002538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	615a      	str	r2, [r3, #20]
          break;
 800252e:	e003      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x130>
          break;
 8002536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d801      	bhi.n	8002542 <HAL_GPIO_Init+0x13a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_Init+0x13e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2bff      	cmp	r3, #255	; 0xff
 800254c:	d802      	bhi.n	8002554 <HAL_GPIO_Init+0x14c>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x152>
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3b08      	subs	r3, #8
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	210f      	movs	r1, #15
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80b1 	beq.w	80026ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a0:	4a48      	ldr	r2, [pc, #288]	; (80026c4 <HAL_GPIO_Init+0x2bc>)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <HAL_GPIO_Init+0x2c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x1ec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <HAL_GPIO_Init+0x2c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1e8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_GPIO_Init+0x2c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1e4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <HAL_GPIO_Init+0x2cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1e0>
 80025e4:	2303      	movs	r3, #3
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f4:	2300      	movs	r3, #0
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002606:	492f      	ldr	r1, [pc, #188]	; (80026c4 <HAL_GPIO_Init+0x2bc>)
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	492c      	ldr	r1, [pc, #176]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	43db      	mvns	r3, r3
 8002636:	4928      	ldr	r1, [pc, #160]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002638:	4013      	ands	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4922      	ldr	r1, [pc, #136]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	43db      	mvns	r3, r3
 800265e:	491e      	ldr	r1, [pc, #120]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002660:	4013      	ands	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4918      	ldr	r1, [pc, #96]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4914      	ldr	r1, [pc, #80]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d021      	beq.n	80026dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e021      	b.n	80026ea <HAL_GPIO_Init+0x2e2>
 80026a6:	bf00      	nop
 80026a8:	10320000 	.word	0x10320000
 80026ac:	10310000 	.word	0x10310000
 80026b0:	10220000 	.word	0x10220000
 80026b4:	10210000 	.word	0x10210000
 80026b8:	10120000 	.word	0x10120000
 80026bc:	10110000 	.word	0x10110000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_GPIO_Init+0x304>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4909      	ldr	r1, [pc, #36]	; (800270c <HAL_GPIO_Init+0x304>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f ae8e 	bne.w	800241c <HAL_GPIO_Init+0x14>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	372c      	adds	r7, #44	; 0x2c
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
 800274a:	4613      	mov	r3, r2
 800274c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800274e:	787b      	ldrb	r3, [r7, #1]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800275a:	e003      	b.n	8002764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	041a      	lsls	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f806 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e12b      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff f8e6 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002818:	f001 f840 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a81      	ldr	r2, [pc, #516]	; (8002a28 <HAL_I2C_Init+0x274>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d807      	bhi.n	8002838 <HAL_I2C_Init+0x84>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <HAL_I2C_Init+0x278>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x92>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a7d      	ldr	r2, [pc, #500]	; (8002a30 <HAL_I2C_Init+0x27c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e7      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a78      	ldr	r2, [pc, #480]	; (8002a34 <HAL_I2C_Init+0x280>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a6a      	ldr	r2, [pc, #424]	; (8002a28 <HAL_I2C_Init+0x274>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d802      	bhi.n	8002888 <HAL_I2C_Init+0xd4>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	e009      	b.n	800289c <HAL_I2C_Init+0xe8>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_I2C_Init+0x284>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	495c      	ldr	r1, [pc, #368]	; (8002a28 <HAL_I2C_Init+0x274>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d819      	bhi.n	80028f0 <HAL_I2C_Init+0x13c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ca:	1c59      	adds	r1, r3, #1
 80028cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028d0:	400b      	ands	r3, r1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_I2C_Init+0x138>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e59      	subs	r1, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	e051      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e04f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_I2C_Init+0x168>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e012      	b.n	8002942 <HAL_I2C_Init+0x18e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	0099      	lsls	r1, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x196>
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <HAL_I2C_Init+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e58      	subs	r0, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	fbb0 f3f3 	udiv	r3, r0, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6911      	ldr	r1, [r2, #16]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	000186a0 	.word	0x000186a0
 8002a2c:	001e847f 	.word	0x001e847f
 8002a30:	003d08ff 	.word	0x003d08ff
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a56:	f7ff fbbf 	bl	80021d8 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	f040 80d9 	bne.w	8002c1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2319      	movs	r3, #25
 8002a70:	2201      	movs	r2, #1
 8002a72:	496d      	ldr	r1, [pc, #436]	; (8002c28 <HAL_I2C_Mem_Write+0x1ec>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f971 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0cc      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Mem_Write+0x56>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0c5      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d007      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2221      	movs	r2, #33	; 0x21
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2240      	movs	r2, #64	; 0x40
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_I2C_Mem_Write+0x1f0>)
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002afa:	88f8      	ldrh	r0, [r7, #6]
 8002afc:	893a      	ldrh	r2, [r7, #8]
 8002afe:	8979      	ldrh	r1, [r7, #10]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4603      	mov	r3, r0
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f890 	bl	8002c30 <I2C_RequestMemoryWrite>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d052      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e081      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fa36 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d107      	bne.n	8002b42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06b      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d11b      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x180>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d017      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1aa      	bne.n	8002b1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fa29 	bl	8003020 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d107      	bne.n	8002bec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e016      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	00100002 	.word	0x00100002
 8002c2c:	ffff0000 	.word	0xffff0000

08002c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	460b      	mov	r3, r1
 8002c44:	813b      	strh	r3, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f878 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c80:	d103      	bne.n	8002c8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e05f      	b.n	8002d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	492d      	ldr	r1, [pc, #180]	; (8002d58 <I2C_RequestMemoryWrite+0x128>)
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f8d3 	bl	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e04c      	b.n	8002d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f95e 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e02b      	b.n	8002d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e021      	b.n	8002d4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f938 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e005      	b.n	8002d4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	00010002 	.word	0x00010002

08002d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	e048      	b.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d044      	beq.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff fa2f 	bl	80021d8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d139      	bne.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10d      	bne.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	e00c      	b.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d116      	bne.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e023      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10d      	bne.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	e00c      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d093      	beq.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5e:	e071      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d123      	bne.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e067      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d041      	beq.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7ff f98a 	bl	80021d8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d136      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e00b      	b.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e021      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10c      	bne.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e00b      	b.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af6d 	bne.w	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9c:	e034      	b.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f886 	bl	80030b0 <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e034      	b.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d028      	beq.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7ff f90f 	bl	80021d8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11d      	bne.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d016      	beq.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d1c3      	bne.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800302c:	e034      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f83e 	bl	80030b0 <I2C_IsAcknowledgeFailed>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e034      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d028      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7ff f8c7 	bl	80021d8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11d      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d016      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d1c3      	bne.n	800302e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c6:	d11b      	bne.n	8003100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e26c      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4b92      	ldr	r3, [pc, #584]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d112      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
 8003144:	4b8c      	ldr	r3, [pc, #560]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003152:	4b89      	ldr	r3, [pc, #548]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06c      	beq.n	8003238 <HAL_RCC_OscConfig+0x12c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d168      	bne.n	8003238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e246      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x76>
 8003174:	4b80      	ldr	r3, [pc, #512]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b7b      	ldr	r3, [pc, #492]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7a      	ldr	r2, [pc, #488]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b78      	ldr	r3, [pc, #480]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a77      	ldr	r2, [pc, #476]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0xbc>
 80031ae:	4b72      	ldr	r3, [pc, #456]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031c8:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a67      	ldr	r2, [pc, #412]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fff6 	bl	80021d8 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fff2 	bl	80021d8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1fa      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe4>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe ffe2 	bl	80021d8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe ffde 	bl	80021d8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1e6      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x10c>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
 800325e:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1ba      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4939      	ldr	r1, [pc, #228]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe ff97 	bl	80021d8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe ff93 	bl	80021d8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e19b      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4927      	ldr	r1, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe ff76 	bl	80021d8 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe ff72 	bl	80021d8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e17a      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03a      	beq.n	8003390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe ff56 	bl	80021d8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe ff52 	bl	80021d8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e15a      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334e:	2001      	movs	r0, #1
 8003350:	f000 facc 	bl	80038ec <RCC_Delay>
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe ff3c 	bl	80021d8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe ff38 	bl	80021d8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e140      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	42420000 	.word	0x42420000
 8003380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b9e      	ldr	r3, [pc, #632]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e9      	bne.n	8003364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a6 	beq.w	80034ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b97      	ldr	r3, [pc, #604]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b94      	ldr	r3, [pc, #592]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a93      	ldr	r2, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]
 80033ba:	4b91      	ldr	r3, [pc, #580]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b8e      	ldr	r3, [pc, #568]	; (8003604 <HAL_RCC_OscConfig+0x4f8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b8b      	ldr	r3, [pc, #556]	; (8003604 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a8a      	ldr	r2, [pc, #552]	; (8003604 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fef9 	bl	80021d8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fef5 	bl	80021d8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0fd      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003410:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a7a      	ldr	r2, [pc, #488]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x334>
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x356>
 8003448:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a6c      	ldr	r2, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003462:	4b67      	ldr	r3, [pc, #412]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a66      	ldr	r2, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe fea9 	bl	80021d8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fea5 	bl	80021d8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0ab      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x37e>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fe93 	bl	80021d8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fe8f 	bl	80021d8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e095      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8081 	beq.w	80035f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d061      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d146      	bne.n	8003596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x4fc>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe fe63 	bl	80021d8 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe fe5f 	bl	80021d8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e067      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d108      	bne.n	8003550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	492d      	ldr	r1, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a19      	ldr	r1, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	4927      	ldr	r1, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x4fc>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fe33 	bl	80021d8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fe2f 	bl	80021d8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e037      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x46a>
 8003594:	e02f      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x4fc>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fe1c 	bl	80021d8 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fe18 	bl	80021d8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e020      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x498>
 80035c2:	e018      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e013      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
 8003608:	42420060 	.word	0x42420060

0800360c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0d0      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d910      	bls.n	8003650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4965      	ldr	r1, [pc, #404]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0b8      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003668:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a52      	ldr	r2, [pc, #328]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	494d      	ldr	r1, [pc, #308]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d040      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d115      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e07f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e073      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06b      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4936      	ldr	r1, [pc, #216]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fd6c 	bl	80021d8 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fe fd68 	bl	80021d8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e053      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d210      	bcs.n	800375c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	4922      	ldr	r1, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e032      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	490e      	ldr	r1, [pc, #56]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379a:	f000 f821 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	490a      	ldr	r1, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	5ccb      	ldrb	r3, [r1, r3]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1cc>)
 80037b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1d0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fcca 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	080053b0 	.word	0x080053b0
 80037d8:	20000004 	.word	0x20000004
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_GetSysClockFreq+0x94>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x30>
 800380a:	2b08      	cmp	r3, #8
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x36>
 800380e:	e027      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_GetSysClockFreq+0x98>)
 8003812:	613b      	str	r3, [r7, #16]
      break;
 8003814:	e027      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_GetSysClockFreq+0x94>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0c5b      	lsrs	r3, r3, #17
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_RCC_GetSysClockFreq+0xa0>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <HAL_RCC_GetSysClockFreq+0x98>)
 8003842:	fb02 f203 	mul.w	r2, r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e004      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	613b      	str	r3, [r7, #16]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0x98>)
 8003862:	613b      	str	r3, [r7, #16]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	693b      	ldr	r3, [r7, #16]
}
 8003868:	4618      	mov	r0, r3
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	007a1200 	.word	0x007a1200
 800387c:	080053c8 	.word	0x080053c8
 8003880:	080053d8 	.word	0x080053d8
 8003884:	003d0900 	.word	0x003d0900

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <HAL_RCC_GetHCLKFreq+0x10>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff2 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	080053c0 	.word	0x080053c0

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffde 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0adb      	lsrs	r3, r3, #11
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080053c0 	.word	0x080053c0

080038ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCC_Delay+0x34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <RCC_Delay+0x38>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003908:	bf00      	nop
  }
  while (Delay --);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <RCC_Delay+0x1c>
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000004 	.word	0x20000004
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e041      	b.n	80039be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fb2c 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 fc50 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e03a      	b.n	8003a56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_TIM_Base_Start_IT+0x98>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x58>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x58>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x58>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d010      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	e007      	b.n	8003a54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800

08003a6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a1a      	ldr	r2, [r3, #32]
 8003a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	f240 4344 	movw	r3, #1092	; 0x444
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e093      	b.n	8003c04 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe fa1b 	bl	8001f2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0c:	f023 0307 	bic.w	r3, r3, #7
 8003b10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 fb75 	bl	800420c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b68:	f023 030c 	bic.w	r3, r3, #12
 8003b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	4313      	orrs	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	011a      	lsls	r2, r3, #4
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	031b      	lsls	r3, r3, #12
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d102      	bne.n	8003c48 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e069      	b.n	8003d20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5c:	e031      	b.n	8003cc2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d110      	bne.n	8003c86 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c64:	7bbb      	ldrb	r3, [r7, #14]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c6a:	7b3b      	ldrb	r3, [r7, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e055      	b.n	8003d20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	e01d      	b.n	8003cc2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d108      	bne.n	8003c9e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c8c:	7bbb      	ldrb	r3, [r7, #14]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c98:	7b3b      	ldrb	r3, [r7, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d001      	beq.n	8003ca2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e03e      	b.n	8003d20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_TIM_Encoder_Start+0xc4>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d008      	beq.n	8003ce0 <HAL_TIM_Encoder_Start+0xd4>
 8003cce:	e00f      	b.n	8003cf0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fb9b 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003cde:	e016      	b.n	8003d0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fb93 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003cee:	e00e      	b.n	8003d0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fb8b 	bl	8004414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2201      	movs	r2, #1
 8003d04:	2104      	movs	r1, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fb84 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003d0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_TIM_Encoder_Stop+0x18>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d008      	beq.n	8003d50 <HAL_TIM_Encoder_Stop+0x28>
 8003d3e:	e00f      	b.n	8003d60 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fb63 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003d4e:	e016      	b.n	8003d7e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2104      	movs	r1, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fb5b 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003d5e:	e00e      	b.n	8003d7e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb53 	bl	8004414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2104      	movs	r1, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb4c 	bl	8004414 <TIM_CCxChannelCmd>
      break;
 8003d7c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_TIM_Encoder_Stop+0x86>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	f240 4344 	movw	r3, #1092	; 0x444
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_Encoder_Stop+0x86>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_TIM_Encoder_Stop+0x92>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d138      	bne.n	8003e2c <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_Encoder_Stop+0xa2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	e013      	b.n	8003df2 <HAL_TIM_Encoder_Stop+0xca>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_Encoder_Stop+0xb2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_Encoder_Stop+0xca>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_Encoder_Stop+0xc2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	e003      	b.n	8003df2 <HAL_TIM_Encoder_Stop+0xca>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_Encoder_Stop+0xda>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	e024      	b.n	8003e4c <HAL_TIM_Encoder_Stop+0x124>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_Encoder_Stop+0xea>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e10:	e01c      	b.n	8003e4c <HAL_TIM_Encoder_Stop+0x124>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_Encoder_Stop+0xfa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e20:	e014      	b.n	8003e4c <HAL_TIM_Encoder_Stop+0x124>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2a:	e00f      	b.n	8003e4c <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01b      	beq.n	8003eba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f06f 0202 	mvn.w	r2, #2
 8003e8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f998 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003ea6:	e005      	b.n	8003eb4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f98b 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f99a 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01b      	beq.n	8003f06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0204 	mvn.w	r2, #4
 8003ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f972 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003ef2:	e005      	b.n	8003f00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f965 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f974 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01b      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f06f 0208 	mvn.w	r2, #8
 8003f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2204      	movs	r2, #4
 8003f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f94c 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003f3e:	e005      	b.n	8003f4c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f93f 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f94e 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01b      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0210 	mvn.w	r2, #16
 8003f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2208      	movs	r2, #8
 8003f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f926 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003f8a:	e005      	b.n	8003f98 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f919 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f928 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0201 	mvn.w	r2, #1
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fd fde1 	bl	8001b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 faa2 	bl	800452a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8f8 	bl	80041fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0220 	mvn.w	r2, #32
 8004026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fa75 	bl	8004518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_TIM_ConfigClockSource+0x1c>
 800404e:	2302      	movs	r3, #2
 8004050:	e0b4      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x186>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004070:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004078:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d03e      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xd4>
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004090:	f200 8087 	bhi.w	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	f000 8086 	beq.w	80041a8 <HAL_TIM_ConfigClockSource+0x172>
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a0:	d87f      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040a2:	2b70      	cmp	r3, #112	; 0x70
 80040a4:	d01a      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0xa6>
 80040a6:	2b70      	cmp	r3, #112	; 0x70
 80040a8:	d87b      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040aa:	2b60      	cmp	r3, #96	; 0x60
 80040ac:	d050      	beq.n	8004150 <HAL_TIM_ConfigClockSource+0x11a>
 80040ae:	2b60      	cmp	r3, #96	; 0x60
 80040b0:	d877      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040b2:	2b50      	cmp	r3, #80	; 0x50
 80040b4:	d03c      	beq.n	8004130 <HAL_TIM_ConfigClockSource+0xfa>
 80040b6:	2b50      	cmp	r3, #80	; 0x50
 80040b8:	d873      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d058      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0x13a>
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d86f      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d064      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x15a>
 80040c6:	2b30      	cmp	r3, #48	; 0x30
 80040c8:	d86b      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d060      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x15a>
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d867      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d05c      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x15a>
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d05a      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x15a>
 80040da:	e062      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f000 f973 	bl	80043d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
      break;
 8004108:	e04f      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6899      	ldr	r1, [r3, #8]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f000 f95c 	bl	80043d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412c:	609a      	str	r2, [r3, #8]
      break;
 800412e:	e03c      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	461a      	mov	r2, r3
 800413e:	f000 f8d3 	bl	80042e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2150      	movs	r1, #80	; 0x50
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f92a 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 800414e:	e02c      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	461a      	mov	r2, r3
 800415e:	f000 f8f1 	bl	8004344 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2160      	movs	r1, #96	; 0x60
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f91a 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 800416e:	e01c      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	461a      	mov	r2, r3
 800417e:	f000 f8b3 	bl	80042e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f90a 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 800418e:	e00c      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 f901 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e003      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e000      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <TIM_Base_SetConfig+0xd0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d007      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <TIM_Base_SetConfig+0xd4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a2b      	ldr	r2, [pc, #172]	; (80042e4 <TIM_Base_SetConfig+0xd8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <TIM_Base_SetConfig+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <TIM_Base_SetConfig+0xd4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <TIM_Base_SetConfig+0xd8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <TIM_Base_SetConfig+0xd0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
  }
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800

080042e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	031b      	lsls	r3, r3, #12
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004380:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f043 0307 	orr.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	021a      	lsls	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2201      	movs	r2, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e046      	b.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d009      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10c      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800

08004518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e042      	b.n	80045d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd fd7c 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f82b 	bl	80045dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004616:	f023 030c 	bic.w	r3, r3, #12
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	430b      	orrs	r3, r1
 8004622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2c      	ldr	r2, [pc, #176]	; (80046f0 <UART_SetConfig+0x114>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d103      	bne.n	800464c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7ff f93e 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	e002      	b.n	8004652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7ff f926 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009a      	lsls	r2, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <UART_SetConfig+0x118>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	0119      	lsls	r1, r3, #4
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fbb2 f2f3 	udiv	r2, r2, r3
 8004688:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <UART_SetConfig+0x118>)
 800468a:	fba3 0302 	umull	r0, r3, r3, r2
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2064      	movs	r0, #100	; 0x64
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	3332      	adds	r3, #50	; 0x32
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <UART_SetConfig+0x118>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a8:	4419      	add	r1, r3
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009a      	lsls	r2, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <UART_SetConfig+0x118>)
 80046c2:	fba3 0302 	umull	r0, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2064      	movs	r0, #100	; 0x64
 80046ca:	fb00 f303 	mul.w	r3, r0, r3
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	3332      	adds	r3, #50	; 0x32
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <UART_SetConfig+0x118>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	440a      	add	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40013800 	.word	0x40013800
 80046f4:	51eb851f 	.word	0x51eb851f

080046f8 <__errno>:
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <__errno+0x8>)
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000010 	.word	0x20000010

08004704 <__libc_init_array>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	2600      	movs	r6, #0
 8004708:	4d0c      	ldr	r5, [pc, #48]	; (800473c <__libc_init_array+0x38>)
 800470a:	4c0d      	ldr	r4, [pc, #52]	; (8004740 <__libc_init_array+0x3c>)
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	42a6      	cmp	r6, r4
 8004712:	d109      	bne.n	8004728 <__libc_init_array+0x24>
 8004714:	f000 fc5c 	bl	8004fd0 <_init>
 8004718:	2600      	movs	r6, #0
 800471a:	4d0a      	ldr	r5, [pc, #40]	; (8004744 <__libc_init_array+0x40>)
 800471c:	4c0a      	ldr	r4, [pc, #40]	; (8004748 <__libc_init_array+0x44>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	42a6      	cmp	r6, r4
 8004724:	d105      	bne.n	8004732 <__libc_init_array+0x2e>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	f855 3b04 	ldr.w	r3, [r5], #4
 800472c:	4798      	blx	r3
 800472e:	3601      	adds	r6, #1
 8004730:	e7ee      	b.n	8004710 <__libc_init_array+0xc>
 8004732:	f855 3b04 	ldr.w	r3, [r5], #4
 8004736:	4798      	blx	r3
 8004738:	3601      	adds	r6, #1
 800473a:	e7f2      	b.n	8004722 <__libc_init_array+0x1e>
 800473c:	08005410 	.word	0x08005410
 8004740:	08005410 	.word	0x08005410
 8004744:	08005410 	.word	0x08005410
 8004748:	08005414 	.word	0x08005414

0800474c <memset>:
 800474c:	4603      	mov	r3, r0
 800474e:	4402      	add	r2, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <siprintf>:
 800475c:	b40e      	push	{r1, r2, r3}
 800475e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004762:	b500      	push	{lr}
 8004764:	b09c      	sub	sp, #112	; 0x70
 8004766:	ab1d      	add	r3, sp, #116	; 0x74
 8004768:	9002      	str	r0, [sp, #8]
 800476a:	9006      	str	r0, [sp, #24]
 800476c:	9107      	str	r1, [sp, #28]
 800476e:	9104      	str	r1, [sp, #16]
 8004770:	4808      	ldr	r0, [pc, #32]	; (8004794 <siprintf+0x38>)
 8004772:	4909      	ldr	r1, [pc, #36]	; (8004798 <siprintf+0x3c>)
 8004774:	f853 2b04 	ldr.w	r2, [r3], #4
 8004778:	9105      	str	r1, [sp, #20]
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	a902      	add	r1, sp, #8
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	f000 f868 	bl	8004854 <_svfiprintf_r>
 8004784:	2200      	movs	r2, #0
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	b01c      	add	sp, #112	; 0x70
 800478c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004790:	b003      	add	sp, #12
 8004792:	4770      	bx	lr
 8004794:	20000010 	.word	0x20000010
 8004798:	ffff0208 	.word	0xffff0208

0800479c <__ssputs_r>:
 800479c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	688e      	ldr	r6, [r1, #8]
 80047a2:	4682      	mov	sl, r0
 80047a4:	429e      	cmp	r6, r3
 80047a6:	460c      	mov	r4, r1
 80047a8:	4690      	mov	r8, r2
 80047aa:	461f      	mov	r7, r3
 80047ac:	d838      	bhi.n	8004820 <__ssputs_r+0x84>
 80047ae:	898a      	ldrh	r2, [r1, #12]
 80047b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047b4:	d032      	beq.n	800481c <__ssputs_r+0x80>
 80047b6:	6825      	ldr	r5, [r4, #0]
 80047b8:	6909      	ldr	r1, [r1, #16]
 80047ba:	3301      	adds	r3, #1
 80047bc:	eba5 0901 	sub.w	r9, r5, r1
 80047c0:	6965      	ldr	r5, [r4, #20]
 80047c2:	444b      	add	r3, r9
 80047c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047cc:	106d      	asrs	r5, r5, #1
 80047ce:	429d      	cmp	r5, r3
 80047d0:	bf38      	it	cc
 80047d2:	461d      	movcc	r5, r3
 80047d4:	0553      	lsls	r3, r2, #21
 80047d6:	d531      	bpl.n	800483c <__ssputs_r+0xa0>
 80047d8:	4629      	mov	r1, r5
 80047da:	f000 fb53 	bl	8004e84 <_malloc_r>
 80047de:	4606      	mov	r6, r0
 80047e0:	b950      	cbnz	r0, 80047f8 <__ssputs_r+0x5c>
 80047e2:	230c      	movs	r3, #12
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	f8ca 3000 	str.w	r3, [sl]
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	464a      	mov	r2, r9
 80047fa:	6921      	ldr	r1, [r4, #16]
 80047fc:	f000 face 	bl	8004d9c <memcpy>
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	6126      	str	r6, [r4, #16]
 800480e:	444e      	add	r6, r9
 8004810:	6026      	str	r6, [r4, #0]
 8004812:	463e      	mov	r6, r7
 8004814:	6165      	str	r5, [r4, #20]
 8004816:	eba5 0509 	sub.w	r5, r5, r9
 800481a:	60a5      	str	r5, [r4, #8]
 800481c:	42be      	cmp	r6, r7
 800481e:	d900      	bls.n	8004822 <__ssputs_r+0x86>
 8004820:	463e      	mov	r6, r7
 8004822:	4632      	mov	r2, r6
 8004824:	4641      	mov	r1, r8
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	f000 fac6 	bl	8004db8 <memmove>
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	1b9b      	subs	r3, r3, r6
 8004832:	4432      	add	r2, r6
 8004834:	2000      	movs	r0, #0
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	e7db      	b.n	80047f4 <__ssputs_r+0x58>
 800483c:	462a      	mov	r2, r5
 800483e:	f000 fb7b 	bl	8004f38 <_realloc_r>
 8004842:	4606      	mov	r6, r0
 8004844:	2800      	cmp	r0, #0
 8004846:	d1e1      	bne.n	800480c <__ssputs_r+0x70>
 8004848:	4650      	mov	r0, sl
 800484a:	6921      	ldr	r1, [r4, #16]
 800484c:	f000 face 	bl	8004dec <_free_r>
 8004850:	e7c7      	b.n	80047e2 <__ssputs_r+0x46>
	...

08004854 <_svfiprintf_r>:
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	4698      	mov	r8, r3
 800485a:	898b      	ldrh	r3, [r1, #12]
 800485c:	4607      	mov	r7, r0
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	460d      	mov	r5, r1
 8004862:	4614      	mov	r4, r2
 8004864:	b09d      	sub	sp, #116	; 0x74
 8004866:	d50e      	bpl.n	8004886 <_svfiprintf_r+0x32>
 8004868:	690b      	ldr	r3, [r1, #16]
 800486a:	b963      	cbnz	r3, 8004886 <_svfiprintf_r+0x32>
 800486c:	2140      	movs	r1, #64	; 0x40
 800486e:	f000 fb09 	bl	8004e84 <_malloc_r>
 8004872:	6028      	str	r0, [r5, #0]
 8004874:	6128      	str	r0, [r5, #16]
 8004876:	b920      	cbnz	r0, 8004882 <_svfiprintf_r+0x2e>
 8004878:	230c      	movs	r3, #12
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e0d1      	b.n	8004a26 <_svfiprintf_r+0x1d2>
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	616b      	str	r3, [r5, #20]
 8004886:	2300      	movs	r3, #0
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	2320      	movs	r3, #32
 800488c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004890:	2330      	movs	r3, #48	; 0x30
 8004892:	f04f 0901 	mov.w	r9, #1
 8004896:	f8cd 800c 	str.w	r8, [sp, #12]
 800489a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a40 <_svfiprintf_r+0x1ec>
 800489e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a2:	4623      	mov	r3, r4
 80048a4:	469a      	mov	sl, r3
 80048a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048aa:	b10a      	cbz	r2, 80048b0 <_svfiprintf_r+0x5c>
 80048ac:	2a25      	cmp	r2, #37	; 0x25
 80048ae:	d1f9      	bne.n	80048a4 <_svfiprintf_r+0x50>
 80048b0:	ebba 0b04 	subs.w	fp, sl, r4
 80048b4:	d00b      	beq.n	80048ce <_svfiprintf_r+0x7a>
 80048b6:	465b      	mov	r3, fp
 80048b8:	4622      	mov	r2, r4
 80048ba:	4629      	mov	r1, r5
 80048bc:	4638      	mov	r0, r7
 80048be:	f7ff ff6d 	bl	800479c <__ssputs_r>
 80048c2:	3001      	adds	r0, #1
 80048c4:	f000 80aa 	beq.w	8004a1c <_svfiprintf_r+0x1c8>
 80048c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ca:	445a      	add	r2, fp
 80048cc:	9209      	str	r2, [sp, #36]	; 0x24
 80048ce:	f89a 3000 	ldrb.w	r3, [sl]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a2 	beq.w	8004a1c <_svfiprintf_r+0x1c8>
 80048d8:	2300      	movs	r3, #0
 80048da:	f04f 32ff 	mov.w	r2, #4294967295
 80048de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e2:	f10a 0a01 	add.w	sl, sl, #1
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	9307      	str	r3, [sp, #28]
 80048ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ee:	931a      	str	r3, [sp, #104]	; 0x68
 80048f0:	4654      	mov	r4, sl
 80048f2:	2205      	movs	r2, #5
 80048f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f8:	4851      	ldr	r0, [pc, #324]	; (8004a40 <_svfiprintf_r+0x1ec>)
 80048fa:	f000 fa41 	bl	8004d80 <memchr>
 80048fe:	9a04      	ldr	r2, [sp, #16]
 8004900:	b9d8      	cbnz	r0, 800493a <_svfiprintf_r+0xe6>
 8004902:	06d0      	lsls	r0, r2, #27
 8004904:	bf44      	itt	mi
 8004906:	2320      	movmi	r3, #32
 8004908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490c:	0711      	lsls	r1, r2, #28
 800490e:	bf44      	itt	mi
 8004910:	232b      	movmi	r3, #43	; 0x2b
 8004912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004916:	f89a 3000 	ldrb.w	r3, [sl]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d015      	beq.n	800494a <_svfiprintf_r+0xf6>
 800491e:	4654      	mov	r4, sl
 8004920:	2000      	movs	r0, #0
 8004922:	f04f 0c0a 	mov.w	ip, #10
 8004926:	9a07      	ldr	r2, [sp, #28]
 8004928:	4621      	mov	r1, r4
 800492a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800492e:	3b30      	subs	r3, #48	; 0x30
 8004930:	2b09      	cmp	r3, #9
 8004932:	d94e      	bls.n	80049d2 <_svfiprintf_r+0x17e>
 8004934:	b1b0      	cbz	r0, 8004964 <_svfiprintf_r+0x110>
 8004936:	9207      	str	r2, [sp, #28]
 8004938:	e014      	b.n	8004964 <_svfiprintf_r+0x110>
 800493a:	eba0 0308 	sub.w	r3, r0, r8
 800493e:	fa09 f303 	lsl.w	r3, r9, r3
 8004942:	4313      	orrs	r3, r2
 8004944:	46a2      	mov	sl, r4
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	e7d2      	b.n	80048f0 <_svfiprintf_r+0x9c>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	9103      	str	r1, [sp, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfbb      	ittet	lt
 8004956:	425b      	neglt	r3, r3
 8004958:	f042 0202 	orrlt.w	r2, r2, #2
 800495c:	9307      	strge	r3, [sp, #28]
 800495e:	9307      	strlt	r3, [sp, #28]
 8004960:	bfb8      	it	lt
 8004962:	9204      	strlt	r2, [sp, #16]
 8004964:	7823      	ldrb	r3, [r4, #0]
 8004966:	2b2e      	cmp	r3, #46	; 0x2e
 8004968:	d10c      	bne.n	8004984 <_svfiprintf_r+0x130>
 800496a:	7863      	ldrb	r3, [r4, #1]
 800496c:	2b2a      	cmp	r3, #42	; 0x2a
 800496e:	d135      	bne.n	80049dc <_svfiprintf_r+0x188>
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	3402      	adds	r4, #2
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	9203      	str	r2, [sp, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004982:	9305      	str	r3, [sp, #20]
 8004984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a50 <_svfiprintf_r+0x1fc>
 8004988:	2203      	movs	r2, #3
 800498a:	4650      	mov	r0, sl
 800498c:	7821      	ldrb	r1, [r4, #0]
 800498e:	f000 f9f7 	bl	8004d80 <memchr>
 8004992:	b140      	cbz	r0, 80049a6 <_svfiprintf_r+0x152>
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	eba0 000a 	sub.w	r0, r0, sl
 800499a:	fa03 f000 	lsl.w	r0, r3, r0
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	3401      	adds	r4, #1
 80049a2:	4303      	orrs	r3, r0
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049aa:	2206      	movs	r2, #6
 80049ac:	4825      	ldr	r0, [pc, #148]	; (8004a44 <_svfiprintf_r+0x1f0>)
 80049ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b2:	f000 f9e5 	bl	8004d80 <memchr>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d038      	beq.n	8004a2c <_svfiprintf_r+0x1d8>
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <_svfiprintf_r+0x1f4>)
 80049bc:	bb1b      	cbnz	r3, 8004a06 <_svfiprintf_r+0x1b2>
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	3307      	adds	r3, #7
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	3308      	adds	r3, #8
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049cc:	4433      	add	r3, r6
 80049ce:	9309      	str	r3, [sp, #36]	; 0x24
 80049d0:	e767      	b.n	80048a2 <_svfiprintf_r+0x4e>
 80049d2:	460c      	mov	r4, r1
 80049d4:	2001      	movs	r0, #1
 80049d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049da:	e7a5      	b.n	8004928 <_svfiprintf_r+0xd4>
 80049dc:	2300      	movs	r3, #0
 80049de:	f04f 0c0a 	mov.w	ip, #10
 80049e2:	4619      	mov	r1, r3
 80049e4:	3401      	adds	r4, #1
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	4620      	mov	r0, r4
 80049ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ee:	3a30      	subs	r2, #48	; 0x30
 80049f0:	2a09      	cmp	r2, #9
 80049f2:	d903      	bls.n	80049fc <_svfiprintf_r+0x1a8>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0c5      	beq.n	8004984 <_svfiprintf_r+0x130>
 80049f8:	9105      	str	r1, [sp, #20]
 80049fa:	e7c3      	b.n	8004984 <_svfiprintf_r+0x130>
 80049fc:	4604      	mov	r4, r0
 80049fe:	2301      	movs	r3, #1
 8004a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a04:	e7f0      	b.n	80049e8 <_svfiprintf_r+0x194>
 8004a06:	ab03      	add	r3, sp, #12
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	462a      	mov	r2, r5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <_svfiprintf_r+0x1f8>)
 8004a10:	a904      	add	r1, sp, #16
 8004a12:	f3af 8000 	nop.w
 8004a16:	1c42      	adds	r2, r0, #1
 8004a18:	4606      	mov	r6, r0
 8004a1a:	d1d6      	bne.n	80049ca <_svfiprintf_r+0x176>
 8004a1c:	89ab      	ldrh	r3, [r5, #12]
 8004a1e:	065b      	lsls	r3, r3, #25
 8004a20:	f53f af2c 	bmi.w	800487c <_svfiprintf_r+0x28>
 8004a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a26:	b01d      	add	sp, #116	; 0x74
 8004a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2c:	ab03      	add	r3, sp, #12
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4638      	mov	r0, r7
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_svfiprintf_r+0x1f8>)
 8004a36:	a904      	add	r1, sp, #16
 8004a38:	f000 f87c 	bl	8004b34 <_printf_i>
 8004a3c:	e7eb      	b.n	8004a16 <_svfiprintf_r+0x1c2>
 8004a3e:	bf00      	nop
 8004a40:	080053da 	.word	0x080053da
 8004a44:	080053e4 	.word	0x080053e4
 8004a48:	00000000 	.word	0x00000000
 8004a4c:	0800479d 	.word	0x0800479d
 8004a50:	080053e0 	.word	0x080053e0

08004a54 <_printf_common>:
 8004a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	4616      	mov	r6, r2
 8004a5a:	4699      	mov	r9, r3
 8004a5c:	688a      	ldr	r2, [r1, #8]
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	4607      	mov	r7, r0
 8004a62:	4293      	cmp	r3, r2
 8004a64:	bfb8      	it	lt
 8004a66:	4613      	movlt	r3, r2
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	b10a      	cbz	r2, 8004a7a <_printf_common+0x26>
 8004a76:	3301      	adds	r3, #1
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	0699      	lsls	r1, r3, #26
 8004a7e:	bf42      	ittt	mi
 8004a80:	6833      	ldrmi	r3, [r6, #0]
 8004a82:	3302      	addmi	r3, #2
 8004a84:	6033      	strmi	r3, [r6, #0]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	f015 0506 	ands.w	r5, r5, #6
 8004a8c:	d106      	bne.n	8004a9c <_printf_common+0x48>
 8004a8e:	f104 0a19 	add.w	sl, r4, #25
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	6832      	ldr	r2, [r6, #0]
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	dc28      	bgt.n	8004aee <_printf_common+0x9a>
 8004a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aa0:	1e13      	subs	r3, r2, #0
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	0692      	lsls	r2, r2, #26
 8004aaa:	d42d      	bmi.n	8004b08 <_printf_common+0xb4>
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d020      	beq.n	8004afc <_printf_common+0xa8>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	68e5      	ldr	r5, [r4, #12]
 8004abe:	f003 0306 	and.w	r3, r3, #6
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	bf18      	it	ne
 8004ac6:	2500      	movne	r5, #0
 8004ac8:	6832      	ldr	r2, [r6, #0]
 8004aca:	f04f 0600 	mov.w	r6, #0
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	bf08      	it	eq
 8004ad2:	1aad      	subeq	r5, r5, r2
 8004ad4:	6922      	ldr	r2, [r4, #16]
 8004ad6:	bf08      	it	eq
 8004ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfc4      	itt	gt
 8004ae0:	1a9b      	subgt	r3, r3, r2
 8004ae2:	18ed      	addgt	r5, r5, r3
 8004ae4:	341a      	adds	r4, #26
 8004ae6:	42b5      	cmp	r5, r6
 8004ae8:	d11a      	bne.n	8004b20 <_printf_common+0xcc>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e008      	b.n	8004b00 <_printf_common+0xac>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4652      	mov	r2, sl
 8004af2:	4649      	mov	r1, r9
 8004af4:	4638      	mov	r0, r7
 8004af6:	47c0      	blx	r8
 8004af8:	3001      	adds	r0, #1
 8004afa:	d103      	bne.n	8004b04 <_printf_common+0xb0>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	3501      	adds	r5, #1
 8004b06:	e7c4      	b.n	8004a92 <_printf_common+0x3e>
 8004b08:	2030      	movs	r0, #48	; 0x30
 8004b0a:	18e1      	adds	r1, r4, r3
 8004b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b16:	4422      	add	r2, r4
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b1e:	e7c5      	b.n	8004aac <_printf_common+0x58>
 8004b20:	2301      	movs	r3, #1
 8004b22:	4622      	mov	r2, r4
 8004b24:	4649      	mov	r1, r9
 8004b26:	4638      	mov	r0, r7
 8004b28:	47c0      	blx	r8
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d0e6      	beq.n	8004afc <_printf_common+0xa8>
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7d9      	b.n	8004ae6 <_printf_common+0x92>
	...

08004b34 <_printf_i>:
 8004b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	460c      	mov	r4, r1
 8004b3a:	7e27      	ldrb	r7, [r4, #24]
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	2f78      	cmp	r7, #120	; 0x78
 8004b40:	4680      	mov	r8, r0
 8004b42:	469a      	mov	sl, r3
 8004b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4a:	d807      	bhi.n	8004b5c <_printf_i+0x28>
 8004b4c:	2f62      	cmp	r7, #98	; 0x62
 8004b4e:	d80a      	bhi.n	8004b66 <_printf_i+0x32>
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	f000 80d9 	beq.w	8004d08 <_printf_i+0x1d4>
 8004b56:	2f58      	cmp	r7, #88	; 0x58
 8004b58:	f000 80a4 	beq.w	8004ca4 <_printf_i+0x170>
 8004b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b64:	e03a      	b.n	8004bdc <_printf_i+0xa8>
 8004b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b6a:	2b15      	cmp	r3, #21
 8004b6c:	d8f6      	bhi.n	8004b5c <_printf_i+0x28>
 8004b6e:	a001      	add	r0, pc, #4	; (adr r0, 8004b74 <_printf_i+0x40>)
 8004b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b74:	08004bcd 	.word	0x08004bcd
 8004b78:	08004be1 	.word	0x08004be1
 8004b7c:	08004b5d 	.word	0x08004b5d
 8004b80:	08004b5d 	.word	0x08004b5d
 8004b84:	08004b5d 	.word	0x08004b5d
 8004b88:	08004b5d 	.word	0x08004b5d
 8004b8c:	08004be1 	.word	0x08004be1
 8004b90:	08004b5d 	.word	0x08004b5d
 8004b94:	08004b5d 	.word	0x08004b5d
 8004b98:	08004b5d 	.word	0x08004b5d
 8004b9c:	08004b5d 	.word	0x08004b5d
 8004ba0:	08004cef 	.word	0x08004cef
 8004ba4:	08004c11 	.word	0x08004c11
 8004ba8:	08004cd1 	.word	0x08004cd1
 8004bac:	08004b5d 	.word	0x08004b5d
 8004bb0:	08004b5d 	.word	0x08004b5d
 8004bb4:	08004d11 	.word	0x08004d11
 8004bb8:	08004b5d 	.word	0x08004b5d
 8004bbc:	08004c11 	.word	0x08004c11
 8004bc0:	08004b5d 	.word	0x08004b5d
 8004bc4:	08004b5d 	.word	0x08004b5d
 8004bc8:	08004cd9 	.word	0x08004cd9
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	600a      	str	r2, [r1, #0]
 8004bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0a4      	b.n	8004d2a <_printf_i+0x1f6>
 8004be0:	6825      	ldr	r5, [r4, #0]
 8004be2:	6808      	ldr	r0, [r1, #0]
 8004be4:	062e      	lsls	r6, r5, #24
 8004be6:	f100 0304 	add.w	r3, r0, #4
 8004bea:	d50a      	bpl.n	8004c02 <_printf_i+0xce>
 8004bec:	6805      	ldr	r5, [r0, #0]
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	da03      	bge.n	8004bfc <_printf_i+0xc8>
 8004bf4:	232d      	movs	r3, #45	; 0x2d
 8004bf6:	426d      	negs	r5, r5
 8004bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfc:	230a      	movs	r3, #10
 8004bfe:	485e      	ldr	r0, [pc, #376]	; (8004d78 <_printf_i+0x244>)
 8004c00:	e019      	b.n	8004c36 <_printf_i+0x102>
 8004c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c06:	6805      	ldr	r5, [r0, #0]
 8004c08:	600b      	str	r3, [r1, #0]
 8004c0a:	bf18      	it	ne
 8004c0c:	b22d      	sxthne	r5, r5
 8004c0e:	e7ef      	b.n	8004bf0 <_printf_i+0xbc>
 8004c10:	680b      	ldr	r3, [r1, #0]
 8004c12:	6825      	ldr	r5, [r4, #0]
 8004c14:	1d18      	adds	r0, r3, #4
 8004c16:	6008      	str	r0, [r1, #0]
 8004c18:	0628      	lsls	r0, r5, #24
 8004c1a:	d501      	bpl.n	8004c20 <_printf_i+0xec>
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	e002      	b.n	8004c26 <_printf_i+0xf2>
 8004c20:	0669      	lsls	r1, r5, #25
 8004c22:	d5fb      	bpl.n	8004c1c <_printf_i+0xe8>
 8004c24:	881d      	ldrh	r5, [r3, #0]
 8004c26:	2f6f      	cmp	r7, #111	; 0x6f
 8004c28:	bf0c      	ite	eq
 8004c2a:	2308      	moveq	r3, #8
 8004c2c:	230a      	movne	r3, #10
 8004c2e:	4852      	ldr	r0, [pc, #328]	; (8004d78 <_printf_i+0x244>)
 8004c30:	2100      	movs	r1, #0
 8004c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c36:	6866      	ldr	r6, [r4, #4]
 8004c38:	2e00      	cmp	r6, #0
 8004c3a:	bfa8      	it	ge
 8004c3c:	6821      	ldrge	r1, [r4, #0]
 8004c3e:	60a6      	str	r6, [r4, #8]
 8004c40:	bfa4      	itt	ge
 8004c42:	f021 0104 	bicge.w	r1, r1, #4
 8004c46:	6021      	strge	r1, [r4, #0]
 8004c48:	b90d      	cbnz	r5, 8004c4e <_printf_i+0x11a>
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d04d      	beq.n	8004cea <_printf_i+0x1b6>
 8004c4e:	4616      	mov	r6, r2
 8004c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c54:	fb03 5711 	mls	r7, r3, r1, r5
 8004c58:	5dc7      	ldrb	r7, [r0, r7]
 8004c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c5e:	462f      	mov	r7, r5
 8004c60:	42bb      	cmp	r3, r7
 8004c62:	460d      	mov	r5, r1
 8004c64:	d9f4      	bls.n	8004c50 <_printf_i+0x11c>
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d10b      	bne.n	8004c82 <_printf_i+0x14e>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	07df      	lsls	r7, r3, #31
 8004c6e:	d508      	bpl.n	8004c82 <_printf_i+0x14e>
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	6861      	ldr	r1, [r4, #4]
 8004c74:	4299      	cmp	r1, r3
 8004c76:	bfde      	ittt	le
 8004c78:	2330      	movle	r3, #48	; 0x30
 8004c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c82:	1b92      	subs	r2, r2, r6
 8004c84:	6122      	str	r2, [r4, #16]
 8004c86:	464b      	mov	r3, r9
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f8cd a000 	str.w	sl, [sp]
 8004c90:	aa03      	add	r2, sp, #12
 8004c92:	f7ff fedf 	bl	8004a54 <_printf_common>
 8004c96:	3001      	adds	r0, #1
 8004c98:	d14c      	bne.n	8004d34 <_printf_i+0x200>
 8004c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9e:	b004      	add	sp, #16
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	4834      	ldr	r0, [pc, #208]	; (8004d78 <_printf_i+0x244>)
 8004ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004caa:	680e      	ldr	r6, [r1, #0]
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cb2:	061f      	lsls	r7, r3, #24
 8004cb4:	600e      	str	r6, [r1, #0]
 8004cb6:	d514      	bpl.n	8004ce2 <_printf_i+0x1ae>
 8004cb8:	07d9      	lsls	r1, r3, #31
 8004cba:	bf44      	itt	mi
 8004cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc0:	6023      	strmi	r3, [r4, #0]
 8004cc2:	b91d      	cbnz	r5, 8004ccc <_printf_i+0x198>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2310      	movs	r3, #16
 8004cce:	e7af      	b.n	8004c30 <_printf_i+0xfc>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	2378      	movs	r3, #120	; 0x78
 8004cda:	4828      	ldr	r0, [pc, #160]	; (8004d7c <_printf_i+0x248>)
 8004cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce0:	e7e3      	b.n	8004caa <_printf_i+0x176>
 8004ce2:	065e      	lsls	r6, r3, #25
 8004ce4:	bf48      	it	mi
 8004ce6:	b2ad      	uxthmi	r5, r5
 8004ce8:	e7e6      	b.n	8004cb8 <_printf_i+0x184>
 8004cea:	4616      	mov	r6, r2
 8004cec:	e7bb      	b.n	8004c66 <_printf_i+0x132>
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	6826      	ldr	r6, [r4, #0]
 8004cf2:	1d1d      	adds	r5, r3, #4
 8004cf4:	6960      	ldr	r0, [r4, #20]
 8004cf6:	600d      	str	r5, [r1, #0]
 8004cf8:	0635      	lsls	r5, r6, #24
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	d501      	bpl.n	8004d02 <_printf_i+0x1ce>
 8004cfe:	6018      	str	r0, [r3, #0]
 8004d00:	e002      	b.n	8004d08 <_printf_i+0x1d4>
 8004d02:	0671      	lsls	r1, r6, #25
 8004d04:	d5fb      	bpl.n	8004cfe <_printf_i+0x1ca>
 8004d06:	8018      	strh	r0, [r3, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4616      	mov	r6, r2
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	e7ba      	b.n	8004c86 <_printf_i+0x152>
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	600a      	str	r2, [r1, #0]
 8004d16:	681e      	ldr	r6, [r3, #0]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	6862      	ldr	r2, [r4, #4]
 8004d1e:	f000 f82f 	bl	8004d80 <memchr>
 8004d22:	b108      	cbz	r0, 8004d28 <_printf_i+0x1f4>
 8004d24:	1b80      	subs	r0, r0, r6
 8004d26:	6060      	str	r0, [r4, #4]
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d32:	e7a8      	b.n	8004c86 <_printf_i+0x152>
 8004d34:	4632      	mov	r2, r6
 8004d36:	4649      	mov	r1, r9
 8004d38:	4640      	mov	r0, r8
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	47d0      	blx	sl
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d0ab      	beq.n	8004c9a <_printf_i+0x166>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	079b      	lsls	r3, r3, #30
 8004d46:	d413      	bmi.n	8004d70 <_printf_i+0x23c>
 8004d48:	68e0      	ldr	r0, [r4, #12]
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	bfb8      	it	lt
 8004d50:	4618      	movlt	r0, r3
 8004d52:	e7a4      	b.n	8004c9e <_printf_i+0x16a>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4632      	mov	r2, r6
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	47d0      	blx	sl
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d09b      	beq.n	8004c9a <_printf_i+0x166>
 8004d62:	3501      	adds	r5, #1
 8004d64:	68e3      	ldr	r3, [r4, #12]
 8004d66:	9903      	ldr	r1, [sp, #12]
 8004d68:	1a5b      	subs	r3, r3, r1
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	dcf2      	bgt.n	8004d54 <_printf_i+0x220>
 8004d6e:	e7eb      	b.n	8004d48 <_printf_i+0x214>
 8004d70:	2500      	movs	r5, #0
 8004d72:	f104 0619 	add.w	r6, r4, #25
 8004d76:	e7f5      	b.n	8004d64 <_printf_i+0x230>
 8004d78:	080053eb 	.word	0x080053eb
 8004d7c:	080053fc 	.word	0x080053fc

08004d80 <memchr>:
 8004d80:	4603      	mov	r3, r0
 8004d82:	b510      	push	{r4, lr}
 8004d84:	b2c9      	uxtb	r1, r1
 8004d86:	4402      	add	r2, r0
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	d101      	bne.n	8004d92 <memchr+0x12>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e003      	b.n	8004d9a <memchr+0x1a>
 8004d92:	7804      	ldrb	r4, [r0, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	428c      	cmp	r4, r1
 8004d98:	d1f6      	bne.n	8004d88 <memchr+0x8>
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <memcpy>:
 8004d9c:	440a      	add	r2, r1
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004da4:	d100      	bne.n	8004da8 <memcpy+0xc>
 8004da6:	4770      	bx	lr
 8004da8:	b510      	push	{r4, lr}
 8004daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dae:	4291      	cmp	r1, r2
 8004db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004db4:	d1f9      	bne.n	8004daa <memcpy+0xe>
 8004db6:	bd10      	pop	{r4, pc}

08004db8 <memmove>:
 8004db8:	4288      	cmp	r0, r1
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	eb01 0402 	add.w	r4, r1, r2
 8004dc0:	d902      	bls.n	8004dc8 <memmove+0x10>
 8004dc2:	4284      	cmp	r4, r0
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	d807      	bhi.n	8004dd8 <memmove+0x20>
 8004dc8:	1e43      	subs	r3, r0, #1
 8004dca:	42a1      	cmp	r1, r4
 8004dcc:	d008      	beq.n	8004de0 <memmove+0x28>
 8004dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd6:	e7f8      	b.n	8004dca <memmove+0x12>
 8004dd8:	4601      	mov	r1, r0
 8004dda:	4402      	add	r2, r0
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	d100      	bne.n	8004de2 <memmove+0x2a>
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dea:	e7f7      	b.n	8004ddc <memmove+0x24>

08004dec <_free_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4605      	mov	r5, r0
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d043      	beq.n	8004e7c <_free_r+0x90>
 8004df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df8:	1f0c      	subs	r4, r1, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfb8      	it	lt
 8004dfe:	18e4      	addlt	r4, r4, r3
 8004e00:	f000 f8d0 	bl	8004fa4 <__malloc_lock>
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <_free_r+0x94>)
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	4610      	mov	r0, r2
 8004e0a:	b933      	cbnz	r3, 8004e1a <_free_r+0x2e>
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	6014      	str	r4, [r2, #0]
 8004e10:	4628      	mov	r0, r5
 8004e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e16:	f000 b8cb 	b.w	8004fb0 <__malloc_unlock>
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	d90a      	bls.n	8004e34 <_free_r+0x48>
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	1862      	adds	r2, r4, r1
 8004e22:	4293      	cmp	r3, r2
 8004e24:	bf01      	itttt	eq
 8004e26:	681a      	ldreq	r2, [r3, #0]
 8004e28:	685b      	ldreq	r3, [r3, #4]
 8004e2a:	1852      	addeq	r2, r2, r1
 8004e2c:	6022      	streq	r2, [r4, #0]
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	6004      	str	r4, [r0, #0]
 8004e32:	e7ed      	b.n	8004e10 <_free_r+0x24>
 8004e34:	461a      	mov	r2, r3
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b10b      	cbz	r3, 8004e3e <_free_r+0x52>
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	d9fa      	bls.n	8004e34 <_free_r+0x48>
 8004e3e:	6811      	ldr	r1, [r2, #0]
 8004e40:	1850      	adds	r0, r2, r1
 8004e42:	42a0      	cmp	r0, r4
 8004e44:	d10b      	bne.n	8004e5e <_free_r+0x72>
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	4401      	add	r1, r0
 8004e4a:	1850      	adds	r0, r2, r1
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	6011      	str	r1, [r2, #0]
 8004e50:	d1de      	bne.n	8004e10 <_free_r+0x24>
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4401      	add	r1, r0
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	6053      	str	r3, [r2, #4]
 8004e5c:	e7d8      	b.n	8004e10 <_free_r+0x24>
 8004e5e:	d902      	bls.n	8004e66 <_free_r+0x7a>
 8004e60:	230c      	movs	r3, #12
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	e7d4      	b.n	8004e10 <_free_r+0x24>
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	1821      	adds	r1, r4, r0
 8004e6a:	428b      	cmp	r3, r1
 8004e6c:	bf01      	itttt	eq
 8004e6e:	6819      	ldreq	r1, [r3, #0]
 8004e70:	685b      	ldreq	r3, [r3, #4]
 8004e72:	1809      	addeq	r1, r1, r0
 8004e74:	6021      	streq	r1, [r4, #0]
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6054      	str	r4, [r2, #4]
 8004e7a:	e7c9      	b.n	8004e10 <_free_r+0x24>
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	200004a0 	.word	0x200004a0

08004e84 <_malloc_r>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	1ccd      	adds	r5, r1, #3
 8004e88:	f025 0503 	bic.w	r5, r5, #3
 8004e8c:	3508      	adds	r5, #8
 8004e8e:	2d0c      	cmp	r5, #12
 8004e90:	bf38      	it	cc
 8004e92:	250c      	movcc	r5, #12
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	4606      	mov	r6, r0
 8004e98:	db01      	blt.n	8004e9e <_malloc_r+0x1a>
 8004e9a:	42a9      	cmp	r1, r5
 8004e9c:	d903      	bls.n	8004ea6 <_malloc_r+0x22>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	6033      	str	r3, [r6, #0]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea6:	f000 f87d 	bl	8004fa4 <__malloc_lock>
 8004eaa:	4921      	ldr	r1, [pc, #132]	; (8004f30 <_malloc_r+0xac>)
 8004eac:	680a      	ldr	r2, [r1, #0]
 8004eae:	4614      	mov	r4, r2
 8004eb0:	b99c      	cbnz	r4, 8004eda <_malloc_r+0x56>
 8004eb2:	4f20      	ldr	r7, [pc, #128]	; (8004f34 <_malloc_r+0xb0>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	b923      	cbnz	r3, 8004ec2 <_malloc_r+0x3e>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f000 f862 	bl	8004f84 <_sbrk_r>
 8004ec0:	6038      	str	r0, [r7, #0]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 f85d 	bl	8004f84 <_sbrk_r>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d123      	bne.n	8004f16 <_malloc_r+0x92>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	f000 f86c 	bl	8004fb0 <__malloc_unlock>
 8004ed8:	e7e3      	b.n	8004ea2 <_malloc_r+0x1e>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	1b5b      	subs	r3, r3, r5
 8004ede:	d417      	bmi.n	8004f10 <_malloc_r+0x8c>
 8004ee0:	2b0b      	cmp	r3, #11
 8004ee2:	d903      	bls.n	8004eec <_malloc_r+0x68>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	441c      	add	r4, r3
 8004ee8:	6025      	str	r5, [r4, #0]
 8004eea:	e004      	b.n	8004ef6 <_malloc_r+0x72>
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	42a2      	cmp	r2, r4
 8004ef0:	bf0c      	ite	eq
 8004ef2:	600b      	streq	r3, [r1, #0]
 8004ef4:	6053      	strne	r3, [r2, #4]
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f000 f85a 	bl	8004fb0 <__malloc_unlock>
 8004efc:	f104 000b 	add.w	r0, r4, #11
 8004f00:	1d23      	adds	r3, r4, #4
 8004f02:	f020 0007 	bic.w	r0, r0, #7
 8004f06:	1ac2      	subs	r2, r0, r3
 8004f08:	d0cc      	beq.n	8004ea4 <_malloc_r+0x20>
 8004f0a:	1a1b      	subs	r3, r3, r0
 8004f0c:	50a3      	str	r3, [r4, r2]
 8004f0e:	e7c9      	b.n	8004ea4 <_malloc_r+0x20>
 8004f10:	4622      	mov	r2, r4
 8004f12:	6864      	ldr	r4, [r4, #4]
 8004f14:	e7cc      	b.n	8004eb0 <_malloc_r+0x2c>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d0e3      	beq.n	8004ee8 <_malloc_r+0x64>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 f82e 	bl	8004f84 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d1dd      	bne.n	8004ee8 <_malloc_r+0x64>
 8004f2c:	e7cf      	b.n	8004ece <_malloc_r+0x4a>
 8004f2e:	bf00      	nop
 8004f30:	200004a0 	.word	0x200004a0
 8004f34:	200004a4 	.word	0x200004a4

08004f38 <_realloc_r>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	460e      	mov	r6, r1
 8004f40:	b921      	cbnz	r1, 8004f4c <_realloc_r+0x14>
 8004f42:	4611      	mov	r1, r2
 8004f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f48:	f7ff bf9c 	b.w	8004e84 <_malloc_r>
 8004f4c:	b922      	cbnz	r2, 8004f58 <_realloc_r+0x20>
 8004f4e:	f7ff ff4d 	bl	8004dec <_free_r>
 8004f52:	4625      	mov	r5, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f58:	f000 f830 	bl	8004fbc <_malloc_usable_size_r>
 8004f5c:	42a0      	cmp	r0, r4
 8004f5e:	d20f      	bcs.n	8004f80 <_realloc_r+0x48>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ff8e 	bl	8004e84 <_malloc_r>
 8004f68:	4605      	mov	r5, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d0f2      	beq.n	8004f54 <_realloc_r+0x1c>
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4622      	mov	r2, r4
 8004f72:	f7ff ff13 	bl	8004d9c <memcpy>
 8004f76:	4631      	mov	r1, r6
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7ff ff37 	bl	8004dec <_free_r>
 8004f7e:	e7e9      	b.n	8004f54 <_realloc_r+0x1c>
 8004f80:	4635      	mov	r5, r6
 8004f82:	e7e7      	b.n	8004f54 <_realloc_r+0x1c>

08004f84 <_sbrk_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	2300      	movs	r3, #0
 8004f88:	4d05      	ldr	r5, [pc, #20]	; (8004fa0 <_sbrk_r+0x1c>)
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fc fe9e 	bl	8001cd0 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_sbrk_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_sbrk_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200006ec 	.word	0x200006ec

08004fa4 <__malloc_lock>:
 8004fa4:	4801      	ldr	r0, [pc, #4]	; (8004fac <__malloc_lock+0x8>)
 8004fa6:	f000 b811 	b.w	8004fcc <__retarget_lock_acquire_recursive>
 8004faa:	bf00      	nop
 8004fac:	200006f4 	.word	0x200006f4

08004fb0 <__malloc_unlock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	; (8004fb8 <__malloc_unlock+0x8>)
 8004fb2:	f000 b80c 	b.w	8004fce <__retarget_lock_release_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	200006f4 	.word	0x200006f4

08004fbc <_malloc_usable_size_r>:
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f18      	subs	r0, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbc      	itt	lt
 8004fc6:	580b      	ldrlt	r3, [r1, r0]
 8004fc8:	18c0      	addlt	r0, r0, r3
 8004fca:	4770      	bx	lr

08004fcc <__retarget_lock_acquire_recursive>:
 8004fcc:	4770      	bx	lr

08004fce <__retarget_lock_release_recursive>:
 8004fce:	4770      	bx	lr

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
